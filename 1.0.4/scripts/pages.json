[{"name":"In()","description":"com.rnett.plugin.naming.TypeRefVariance.In","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref-variance/-in/index.html","searchKeys":["In","In()","com.rnett.plugin.naming.TypeRefVariance.In"]},{"name":"Invariant()","description":"com.rnett.plugin.naming.TypeRefVariance.Invariant","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref-variance/-invariant/index.html","searchKeys":["Invariant","Invariant()","com.rnett.plugin.naming.TypeRefVariance.Invariant"]},{"name":"Out()","description":"com.rnett.plugin.naming.TypeRefVariance.Out","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref-variance/-out/index.html","searchKeys":["Out","Out()","com.rnett.plugin.naming.TypeRefVariance.Out"]},{"name":"abstract class ClassRef(name: String, parent: Namespace?) : Namespace, Reference<IrClassSymbol> ","description":"com.rnett.plugin.naming.ClassRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class-ref/index.html","searchKeys":["ClassRef","abstract class ClassRef(name: String, parent: Namespace?) : Namespace, Reference<IrClassSymbol> ","com.rnett.plugin.naming.ClassRef"]},{"name":"abstract class IrTransformer(context: IrPluginContext, messageCollector: MessageCollector) : IrElementTransformerVoidWithContext, FileLoweringPass, HasContext, KnowsCurrentFile","description":"com.rnett.plugin.ir.IrTransformer","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-transformer/index.html","searchKeys":["IrTransformer","abstract class IrTransformer(context: IrPluginContext, messageCollector: MessageCollector) : IrElementTransformerVoidWithContext, FileLoweringPass, HasContext, KnowsCurrentFile","com.rnett.plugin.ir.IrTransformer"]},{"name":"abstract class MethodBuilder(builder: IrBuilderWithScope, context: IrPluginContext) : HasContext","description":"com.rnett.plugin.stdlib.MethodBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-method-builder/index.html","searchKeys":["MethodBuilder","abstract class MethodBuilder(builder: IrBuilderWithScope, context: IrPluginContext) : HasContext","com.rnett.plugin.stdlib.MethodBuilder"]},{"name":"abstract class PackageRef(name: String, parent: Namespace?) : Namespace","description":"com.rnett.plugin.naming.PackageRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-package-ref/index.html","searchKeys":["PackageRef","abstract class PackageRef(name: String, parent: Namespace?) : Namespace","com.rnett.plugin.naming.PackageRef"]},{"name":"abstract class TypedMethodBuilder(typeCheck: (IrType) -> Boolean, builder: IrBuilderWithScope, context: IrPluginContext, message: (IrExpression) -> String) : MethodBuilder","description":"com.rnett.plugin.stdlib.TypedMethodBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-typed-method-builder/index.html","searchKeys":["TypedMethodBuilder","abstract class TypedMethodBuilder(typeCheck: (IrType) -> Boolean, builder: IrBuilderWithScope, context: IrPluginContext, message: (IrExpression) -> String) : MethodBuilder","com.rnett.plugin.stdlib.TypedMethodBuilder"]},{"name":"abstract fun filter(filter: (IrConstructor) -> Boolean)","description":"com.rnett.plugin.naming.IConstructorFilter.filter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-constructor-filter/filter.html","searchKeys":["filter","abstract fun filter(filter: (IrConstructor) -> Boolean)","com.rnett.plugin.naming.IConstructorFilter.filter"]},{"name":"abstract fun filter(filter: (IrFunction) -> Boolean)","description":"com.rnett.plugin.naming.IFunctionFilter.filter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/filter.html","searchKeys":["filter","abstract fun filter(filter: (IrFunction) -> Boolean)","com.rnett.plugin.naming.IFunctionFilter.filter"]},{"name":"abstract fun filter(filter: (IrProperty) -> Boolean)","description":"com.rnett.plugin.naming.IPropertyFilter.filter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/filter.html","searchKeys":["filter","abstract fun filter(filter: (IrProperty) -> Boolean)","com.rnett.plugin.naming.IPropertyFilter.filter"]},{"name":"abstract fun matches(function: IrConstructor): Boolean","description":"com.rnett.plugin.naming.IConstructorFilter.matches","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-constructor-filter/matches.html","searchKeys":["matches","abstract fun matches(function: IrConstructor): Boolean","com.rnett.plugin.naming.IConstructorFilter.matches"]},{"name":"abstract fun matches(function: IrFunction): Boolean","description":"com.rnett.plugin.naming.IFunctionFilter.matches","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/matches.html","searchKeys":["matches","abstract fun matches(function: IrFunction): Boolean","com.rnett.plugin.naming.IFunctionFilter.matches"]},{"name":"abstract fun matches(property: IrProperty): Boolean","description":"com.rnett.plugin.naming.IPropertyFilter.matches","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/matches.html","searchKeys":["matches","abstract fun matches(property: IrProperty): Boolean","com.rnett.plugin.naming.IPropertyFilter.matches"]},{"name":"abstract fun remapValue(symbol: IrSimpleFunctionSymbol): IrSimpleFunctionSymbol?","description":"com.rnett.plugin.ir.FunctionRemapper.remapValue","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-function-remapper/remap-value.html","searchKeys":["remapValue","abstract fun remapValue(symbol: IrSimpleFunctionSymbol): IrSimpleFunctionSymbol?","com.rnett.plugin.ir.FunctionRemapper.remapValue"]},{"name":"abstract fun remapValue(symbol: IrValueSymbol): IrValueSymbol?","description":"com.rnett.plugin.ir.ValueRemapper.remapValue","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-value-remapper/remap-value.html","searchKeys":["remapValue","abstract fun remapValue(symbol: IrValueSymbol): IrValueSymbol?","com.rnett.plugin.ir.ValueRemapper.remapValue"]},{"name":"abstract fun resolve(context: IrPluginContext): S","description":"com.rnett.plugin.naming.Reference.resolve","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-reference/resolve.html","searchKeys":["resolve","abstract fun resolve(context: IrPluginContext): S","com.rnett.plugin.naming.Reference.resolve"]},{"name":"abstract fun resolveOrNull(context: IrPluginContext): S?","description":"com.rnett.plugin.naming.Reference.resolveOrNull","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-reference/resolve-or-null.html","searchKeys":["resolveOrNull","abstract fun resolveOrNull(context: IrPluginContext): S?","com.rnett.plugin.naming.Reference.resolveOrNull"]},{"name":"abstract fun toIrString(): String","description":"com.rnett.plugin.naming.TypeProjectionRef.toIrString","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-projection-ref/to-ir-string.html","searchKeys":["toIrString","abstract fun toIrString(): String","com.rnett.plugin.naming.TypeProjectionRef.toIrString"]},{"name":"abstract fun toIrTypeArg(context: IrPluginContext): IrTypeArgument","description":"com.rnett.plugin.naming.TypeProjectionRef.toIrTypeArg","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-projection-ref/to-ir-type-arg.html","searchKeys":["toIrTypeArg","abstract fun toIrTypeArg(context: IrPluginContext): IrTypeArgument","com.rnett.plugin.naming.TypeProjectionRef.toIrTypeArg"]},{"name":"abstract override fun toString(): String","description":"com.rnett.plugin.naming.TypeProjectionRef.toString","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-projection-ref/to-string.html","searchKeys":["toString","abstract override fun toString(): String","com.rnett.plugin.naming.TypeProjectionRef.toString"]},{"name":"abstract val context: IrPluginContext","description":"com.rnett.plugin.ir.HasContext.context","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/context.html","searchKeys":["context","abstract val context: IrPluginContext","com.rnett.plugin.ir.HasContext.context"]},{"name":"abstract val file: IrFile","description":"com.rnett.plugin.ir.KnowsCurrentFile.file","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/file.html","searchKeys":["file","abstract val file: IrFile","com.rnett.plugin.ir.KnowsCurrentFile.file"]},{"name":"abstract val klass: ClassRef","description":"com.rnett.plugin.stdlib.ExceptionClass.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-class/klass.html","searchKeys":["klass","abstract val klass: ClassRef","com.rnett.plugin.stdlib.ExceptionClass.klass"]},{"name":"abstract val klass: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Mathable.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-mathable/klass.html","searchKeys":["klass","abstract val klass: ClassRef","com.rnett.plugin.stdlib.Kotlin.Mathable.klass"]},{"name":"abstract var extensionReceiver: (IrValueParameter) -> Boolean?","description":"com.rnett.plugin.naming.IFunctionFilter.extensionReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/extension-receiver.html","searchKeys":["extensionReceiver","abstract var extensionReceiver: (IrValueParameter) -> Boolean?","com.rnett.plugin.naming.IFunctionFilter.extensionReceiver"]},{"name":"abstract var extensionReceiver: (IrValueParameter) -> Boolean?","description":"com.rnett.plugin.naming.IPropertyFilter.extensionReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/extension-receiver.html","searchKeys":["extensionReceiver","abstract var extensionReceiver: (IrValueParameter) -> Boolean?","com.rnett.plugin.naming.IPropertyFilter.extensionReceiver"]},{"name":"abstract var fieldType: String?","description":"com.rnett.plugin.naming.IPropertyFilter.fieldType","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/field-type.html","searchKeys":["fieldType","abstract var fieldType: String?","com.rnett.plugin.naming.IPropertyFilter.fieldType"]},{"name":"abstract var getterType: String?","description":"com.rnett.plugin.naming.IPropertyFilter.getterType","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/getter-type.html","searchKeys":["getterType","abstract var getterType: String?","com.rnett.plugin.naming.IPropertyFilter.getterType"]},{"name":"abstract var hasBackingField: Boolean?","description":"com.rnett.plugin.naming.IPropertyFilter.hasBackingField","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/has-backing-field.html","searchKeys":["hasBackingField","abstract var hasBackingField: Boolean?","com.rnett.plugin.naming.IPropertyFilter.hasBackingField"]},{"name":"abstract var hasDispatchReceiver: Boolean?","description":"com.rnett.plugin.naming.IFunctionFilter.hasDispatchReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/has-dispatch-receiver.html","searchKeys":["hasDispatchReceiver","abstract var hasDispatchReceiver: Boolean?","com.rnett.plugin.naming.IFunctionFilter.hasDispatchReceiver"]},{"name":"abstract var hasExtensionReceiver: Boolean?","description":"com.rnett.plugin.naming.IFunctionFilter.hasExtensionReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/has-extension-receiver.html","searchKeys":["hasExtensionReceiver","abstract var hasExtensionReceiver: Boolean?","com.rnett.plugin.naming.IFunctionFilter.hasExtensionReceiver"]},{"name":"abstract var hasExtensionReceiver: Boolean?","description":"com.rnett.plugin.naming.IPropertyFilter.hasExtensionReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/has-extension-receiver.html","searchKeys":["hasExtensionReceiver","abstract var hasExtensionReceiver: Boolean?","com.rnett.plugin.naming.IPropertyFilter.hasExtensionReceiver"]},{"name":"abstract var hasGetter: Boolean?","description":"com.rnett.plugin.naming.IPropertyFilter.hasGetter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/has-getter.html","searchKeys":["hasGetter","abstract var hasGetter: Boolean?","com.rnett.plugin.naming.IPropertyFilter.hasGetter"]},{"name":"abstract var hasSetter: Boolean?","description":"com.rnett.plugin.naming.IPropertyFilter.hasSetter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/has-setter.html","searchKeys":["hasSetter","abstract var hasSetter: Boolean?","com.rnett.plugin.naming.IPropertyFilter.hasSetter"]},{"name":"abstract var hasVararg: Boolean?","description":"com.rnett.plugin.naming.IConstructorFilter.hasVararg","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-constructor-filter/has-vararg.html","searchKeys":["hasVararg","abstract var hasVararg: Boolean?","com.rnett.plugin.naming.IConstructorFilter.hasVararg"]},{"name":"abstract var hasVararg: Boolean?","description":"com.rnett.plugin.naming.IFunctionFilter.hasVararg","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/has-vararg.html","searchKeys":["hasVararg","abstract var hasVararg: Boolean?","com.rnett.plugin.naming.IFunctionFilter.hasVararg"]},{"name":"abstract var isDelegated: Boolean?","description":"com.rnett.plugin.naming.IPropertyFilter.isDelegated","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/is-delegated.html","searchKeys":["isDelegated","abstract var isDelegated: Boolean?","com.rnett.plugin.naming.IPropertyFilter.isDelegated"]},{"name":"abstract var isExpect: Boolean?","description":"com.rnett.plugin.naming.IConstructorFilter.isExpect","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-constructor-filter/is-expect.html","searchKeys":["isExpect","abstract var isExpect: Boolean?","com.rnett.plugin.naming.IConstructorFilter.isExpect"]},{"name":"abstract var isExpect: Boolean?","description":"com.rnett.plugin.naming.IFunctionFilter.isExpect","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/is-expect.html","searchKeys":["isExpect","abstract var isExpect: Boolean?","com.rnett.plugin.naming.IFunctionFilter.isExpect"]},{"name":"abstract var isExpect: Boolean?","description":"com.rnett.plugin.naming.IPropertyFilter.isExpect","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/is-expect.html","searchKeys":["isExpect","abstract var isExpect: Boolean?","com.rnett.plugin.naming.IPropertyFilter.isExpect"]},{"name":"abstract var isPrimary: Boolean?","description":"com.rnett.plugin.naming.IConstructorFilter.isPrimary","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-constructor-filter/is-primary.html","searchKeys":["isPrimary","abstract var isPrimary: Boolean?","com.rnett.plugin.naming.IConstructorFilter.isPrimary"]},{"name":"abstract var numParameters: Int?","description":"com.rnett.plugin.naming.IConstructorFilter.numParameters","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-constructor-filter/num-parameters.html","searchKeys":["numParameters","abstract var numParameters: Int?","com.rnett.plugin.naming.IConstructorFilter.numParameters"]},{"name":"abstract var numParameters: Int?","description":"com.rnett.plugin.naming.IFunctionFilter.numParameters","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/num-parameters.html","searchKeys":["numParameters","abstract var numParameters: Int?","com.rnett.plugin.naming.IFunctionFilter.numParameters"]},{"name":"abstract var numTypeParameters: Int?","description":"com.rnett.plugin.naming.IFunctionFilter.numTypeParameters","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/num-type-parameters.html","searchKeys":["numTypeParameters","abstract var numTypeParameters: Int?","com.rnett.plugin.naming.IFunctionFilter.numTypeParameters"]},{"name":"abstract var parameters: MutableMap<Int, (IrValueParameter) -> Boolean>","description":"com.rnett.plugin.naming.IConstructorFilter.parameters","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-constructor-filter/parameters.html","searchKeys":["parameters","abstract var parameters: MutableMap<Int, (IrValueParameter) -> Boolean>","com.rnett.plugin.naming.IConstructorFilter.parameters"]},{"name":"abstract var parameters: MutableMap<Int, (IrValueParameter) -> Boolean>","description":"com.rnett.plugin.naming.IFunctionFilter.parameters","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/parameters.html","searchKeys":["parameters","abstract var parameters: MutableMap<Int, (IrValueParameter) -> Boolean>","com.rnett.plugin.naming.IFunctionFilter.parameters"]},{"name":"abstract var type: String?","description":"com.rnett.plugin.naming.IPropertyFilter.type","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/type.html","searchKeys":["type","abstract var type: String?","com.rnett.plugin.naming.IPropertyFilter.type"]},{"name":"class AnyBuilders(builder: IrBuilderWithScope, context: IrPluginContext) : MethodBuilder","description":"com.rnett.plugin.stdlib.AnyBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-any-builders/index.html","searchKeys":["AnyBuilders","class AnyBuilders(builder: IrBuilderWithScope, context: IrPluginContext) : MethodBuilder","com.rnett.plugin.stdlib.AnyBuilders"]},{"name":"class ArrayBuilders(builder: IrBuilderWithScope, context: IrPluginContext) : TypedMethodBuilder","description":"com.rnett.plugin.stdlib.ArrayBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-array-builders/index.html","searchKeys":["ArrayBuilders","class ArrayBuilders(builder: IrBuilderWithScope, context: IrPluginContext) : TypedMethodBuilder","com.rnett.plugin.stdlib.ArrayBuilders"]},{"name":"class Builder","description":"com.rnett.plugin.ir.ReferenceReplacements.Builder","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/-builder/index.html","searchKeys":["Builder","class Builder","com.rnett.plugin.ir.ReferenceReplacements.Builder"]},{"name":"class CollectionsBuilders(stdlib: StdlibBuilders, builder: IrBuilderWithScope, context: IrPluginContext) : MethodBuilder","description":"com.rnett.plugin.stdlib.CollectionsBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/index.html","searchKeys":["CollectionsBuilders","class CollectionsBuilders(stdlib: StdlibBuilders, builder: IrBuilderWithScope, context: IrPluginContext) : MethodBuilder","com.rnett.plugin.stdlib.CollectionsBuilders"]},{"name":"class ConstructorRef : BaseReference, Reference<IrConstructorSymbol> , IConstructorFilter","description":"com.rnett.plugin.naming.ConstructorRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-ref/index.html","searchKeys":["ConstructorRef","class ConstructorRef : BaseReference, Reference<IrConstructorSymbol> , IConstructorFilter","com.rnett.plugin.naming.ConstructorRef"]},{"name":"class ExceptionBuildersWithCause(klass: ExceptionClassWithCause, builder: IrBuilderWithScope, context: IrPluginContext) : ExceptionBuilders","description":"com.rnett.plugin.stdlib.ExceptionBuildersWithCause","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-builders-with-cause/index.html","searchKeys":["ExceptionBuildersWithCause","class ExceptionBuildersWithCause(klass: ExceptionClassWithCause, builder: IrBuilderWithScope, context: IrPluginContext) : ExceptionBuilders","com.rnett.plugin.stdlib.ExceptionBuildersWithCause"]},{"name":"class FunctionRef : BaseReference, Reference<IrSimpleFunctionSymbol> , IFunctionFilter","description":"com.rnett.plugin.naming.FunctionRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-ref/index.html","searchKeys":["FunctionRef","class FunctionRef : BaseReference, Reference<IrSimpleFunctionSymbol> , IFunctionFilter","com.rnett.plugin.naming.FunctionRef"]},{"name":"class FunctionRefDelegate : FunctionFilter, ReadOnlyProperty<Any?, FunctionRef> ","description":"com.rnett.plugin.naming.FunctionRefDelegate","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-ref-delegate/index.html","searchKeys":["FunctionRefDelegate","class FunctionRefDelegate : FunctionFilter, ReadOnlyProperty<Any?, FunctionRef> ","com.rnett.plugin.naming.FunctionRefDelegate"]},{"name":"class IrTryBuilder(builder: IrBuilderWithScope)","description":"com.rnett.plugin.ir.IrTryBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-try-builder/index.html","searchKeys":["IrTryBuilder","class IrTryBuilder(builder: IrBuilderWithScope)","com.rnett.plugin.ir.IrTryBuilder"]},{"name":"class MathableBuilders(mathable: Kotlin.Mathable, builder: IrBuilderWithScope, context: IrPluginContext) : NumberBuilders","description":"com.rnett.plugin.stdlib.MathableBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mathable-builders/index.html","searchKeys":["MathableBuilders","class MathableBuilders(mathable: Kotlin.Mathable, builder: IrBuilderWithScope, context: IrPluginContext) : NumberBuilders","com.rnett.plugin.stdlib.MathableBuilders"]},{"name":"class PropertyRef : BaseReference, Reference<IrPropertySymbol> , IPropertyFilter","description":"com.rnett.plugin.naming.PropertyRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-ref/index.html","searchKeys":["PropertyRef","class PropertyRef : BaseReference, Reference<IrPropertySymbol> , IPropertyFilter","com.rnett.plugin.naming.PropertyRef"]},{"name":"class PropertyRefDelegate : PropertyFilter, ReadOnlyProperty<Any?, PropertyRef> ","description":"com.rnett.plugin.naming.PropertyRefDelegate","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-ref-delegate/index.html","searchKeys":["PropertyRefDelegate","class PropertyRefDelegate : PropertyFilter, ReadOnlyProperty<Any?, PropertyRef> ","com.rnett.plugin.naming.PropertyRefDelegate"]},{"name":"class ReferenceReplacements : ReferenceRemapper","description":"com.rnett.plugin.ir.ReferenceReplacements","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/index.html","searchKeys":["ReferenceReplacements","class ReferenceReplacements : ReferenceRemapper","com.rnett.plugin.ir.ReferenceReplacements"]},{"name":"class StdlibBuilders(builder: IrBuilderWithScope, context: IrPluginContext) : MethodBuilder","description":"com.rnett.plugin.stdlib.StdlibBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/index.html","searchKeys":["StdlibBuilders","class StdlibBuilders(builder: IrBuilderWithScope, context: IrPluginContext) : MethodBuilder","com.rnett.plugin.stdlib.StdlibBuilders"]},{"name":"data class TypeRef(classifier: ClassRef, nullable: Boolean, arguments: List<TypeProjectionRef>, variance: TypeRefVariance) : TypeProjectionRef","description":"com.rnett.plugin.naming.TypeRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/index.html","searchKeys":["TypeRef","data class TypeRef(classifier: ClassRef, nullable: Boolean, arguments: List<TypeProjectionRef>, variance: TypeRefVariance) : TypeProjectionRef","com.rnett.plugin.naming.TypeRef"]},{"name":"enum TypeRefVariance : Enum<TypeRefVariance> ","description":"com.rnett.plugin.naming.TypeRefVariance","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref-variance/index.html","searchKeys":["TypeRefVariance","enum TypeRefVariance : Enum<TypeRefVariance> ","com.rnett.plugin.naming.TypeRefVariance"]},{"name":"fun <T : IConstructorFilter> T.withFilter(filter: (IrConstructor) -> Boolean): T","description":"com.rnett.plugin.naming.withFilter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/with-filter.html","searchKeys":["withFilter","fun <T : IConstructorFilter> T.withFilter(filter: (IrConstructor) -> Boolean): T","com.rnett.plugin.naming.withFilter"]},{"name":"fun <T : IFunctionFilter> T.withExtensionReceiverType(classRef: () -> ClassRef): T","description":"com.rnett.plugin.naming.withExtensionReceiverType","location":"-compiler -plugin -utils/com.rnett.plugin.naming/with-extension-receiver-type.html","searchKeys":["withExtensionReceiverType","fun <T : IFunctionFilter> T.withExtensionReceiverType(classRef: () -> ClassRef): T","com.rnett.plugin.naming.withExtensionReceiverType"]},{"name":"fun <T : IFunctionFilter> T.withFilter(filter: (IrFunction) -> Boolean): T","description":"com.rnett.plugin.naming.withFilter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/with-filter.html","searchKeys":["withFilter","fun <T : IFunctionFilter> T.withFilter(filter: (IrFunction) -> Boolean): T","com.rnett.plugin.naming.withFilter"]},{"name":"fun <T : IPropertyFilter> T.withFilter(filter: (IrProperty) -> Boolean): T","description":"com.rnett.plugin.naming.withFilter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/with-filter.html","searchKeys":["withFilter","fun <T : IPropertyFilter> T.withFilter(filter: (IrProperty) -> Boolean): T","com.rnett.plugin.naming.withFilter"]},{"name":"fun <T : IrMemberAccessExpression<*>> T.withDispatchReceiver(receiver: IrExpression?, substitute: Boolean = this is IrCall): T","description":"com.rnett.plugin.ir.withDispatchReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.ir/with-dispatch-receiver.html","searchKeys":["withDispatchReceiver","fun <T : IrMemberAccessExpression<*>> T.withDispatchReceiver(receiver: IrExpression?, substitute: Boolean = this is IrCall): T","com.rnett.plugin.ir.withDispatchReceiver"]},{"name":"fun <T : IrMemberAccessExpression<*>> T.withExtensionReceiver(receiver: IrExpression?, substitute: Boolean = this is IrCall): T","description":"com.rnett.plugin.ir.withExtensionReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.ir/with-extension-receiver.html","searchKeys":["withExtensionReceiver","fun <T : IrMemberAccessExpression<*>> T.withExtensionReceiver(receiver: IrExpression?, substitute: Boolean = this is IrCall): T","com.rnett.plugin.ir.withExtensionReceiver"]},{"name":"fun <T : IrMemberAccessExpression<*>> T.withTypeArguments(vararg args: IrType?, substitute: Boolean = this is IrCall): T","description":"com.rnett.plugin.ir.withTypeArguments","location":"-compiler -plugin -utils/com.rnett.plugin.ir/with-type-arguments.html","searchKeys":["withTypeArguments","fun <T : IrMemberAccessExpression<*>> T.withTypeArguments(vararg args: IrType?, substitute: Boolean = this is IrCall): T","com.rnett.plugin.ir.withTypeArguments"]},{"name":"fun <T : IrMemberAccessExpression<*>> T.withTypeArguments(vararg namedArgs: Pair<String, IrType?>, substitute: Boolean = this is IrCall): T","description":"com.rnett.plugin.ir.withTypeArguments","location":"-compiler -plugin -utils/com.rnett.plugin.ir/with-type-arguments.html","searchKeys":["withTypeArguments","fun <T : IrMemberAccessExpression<*>> T.withTypeArguments(vararg namedArgs: Pair<String, IrType?>, substitute: Boolean = this is IrCall): T","com.rnett.plugin.ir.withTypeArguments"]},{"name":"fun <T : IrMemberAccessExpression<*>> T.withValueArguments(vararg args: IrExpression?, substitute: Boolean = this is IrCall): T","description":"com.rnett.plugin.ir.withValueArguments","location":"-compiler -plugin -utils/com.rnett.plugin.ir/with-value-arguments.html","searchKeys":["withValueArguments","fun <T : IrMemberAccessExpression<*>> T.withValueArguments(vararg args: IrExpression?, substitute: Boolean = this is IrCall): T","com.rnett.plugin.ir.withValueArguments"]},{"name":"fun <T : IrMemberAccessExpression<*>> T.withValueArguments(vararg namedArgs: Pair<String, IrExpression?>, substitute: Boolean = this is IrCall): T","description":"com.rnett.plugin.ir.withValueArguments","location":"-compiler -plugin -utils/com.rnett.plugin.ir/with-value-arguments.html","searchKeys":["withValueArguments","fun <T : IrMemberAccessExpression<*>> T.withValueArguments(vararg namedArgs: Pair<String, IrExpression?>, substitute: Boolean = this is IrCall): T","com.rnett.plugin.ir.withValueArguments"]},{"name":"fun AnyBuilders(builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.AnyBuilders.AnyBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-any-builders/-any-builders.html","searchKeys":["AnyBuilders","fun AnyBuilders(builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.AnyBuilders.AnyBuilders"]},{"name":"fun ArrayBuilders(builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.ArrayBuilders.ArrayBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-array-builders/-array-builders.html","searchKeys":["ArrayBuilders","fun ArrayBuilders(builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.ArrayBuilders.ArrayBuilders"]},{"name":"fun Class(fqName: FqName): ClassRef","description":"com.rnett.plugin.naming.Class","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class.html","searchKeys":["Class","fun Class(fqName: FqName): ClassRef","com.rnett.plugin.naming.Class"]},{"name":"fun Class(ref: KClass<*>): ClassRef","description":"com.rnett.plugin.naming.Class","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class.html","searchKeys":["Class","fun Class(ref: KClass<*>): ClassRef","com.rnett.plugin.naming.Class"]},{"name":"fun ClassRef()","description":"com.rnett.plugin.naming.ClassRef.ClassRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class-ref/-class-ref.html","searchKeys":["ClassRef","fun ClassRef()","com.rnett.plugin.naming.ClassRef.ClassRef"]},{"name":"fun ClassRef(name: String)","description":"com.rnett.plugin.naming.ClassRef.ClassRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class-ref/-class-ref.html","searchKeys":["ClassRef","fun ClassRef(name: String)","com.rnett.plugin.naming.ClassRef.ClassRef"]},{"name":"fun ClassRef(name: String, parent: Namespace?)","description":"com.rnett.plugin.naming.ClassRef.ClassRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class-ref/-class-ref.html","searchKeys":["ClassRef","fun ClassRef(name: String, parent: Namespace?)","com.rnett.plugin.naming.ClassRef.ClassRef"]},{"name":"fun ClassRef.constructor(filter: IConstructorFilter.() -> Unit): ConstructorRef","description":"com.rnett.plugin.naming.constructor","location":"-compiler -plugin -utils/com.rnett.plugin.naming/constructor.html","searchKeys":["constructor","fun ClassRef.constructor(filter: IConstructorFilter.() -> Unit): ConstructorRef","com.rnett.plugin.naming.constructor"]},{"name":"fun ClassRef.primaryConstructor(filter: IConstructorFilter.() -> Unit = {}): ConstructorRef","description":"com.rnett.plugin.naming.primaryConstructor","location":"-compiler -plugin -utils/com.rnett.plugin.naming/primary-constructor.html","searchKeys":["primaryConstructor","fun ClassRef.primaryConstructor(filter: IConstructorFilter.() -> Unit = {}): ConstructorRef","com.rnett.plugin.naming.primaryConstructor"]},{"name":"fun CollectionBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Collections.Collection)","description":"com.rnett.plugin.stdlib.CollectionBuilders.CollectionBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collection-builders/-collection-builders.html","searchKeys":["CollectionBuilders","fun CollectionBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Collections.Collection)","com.rnett.plugin.stdlib.CollectionBuilders.CollectionBuilders"]},{"name":"fun CollectionsBuilders(stdlib: StdlibBuilders, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.CollectionsBuilders.CollectionsBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/-collections-builders.html","searchKeys":["CollectionsBuilders","fun CollectionsBuilders(stdlib: StdlibBuilders, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.CollectionsBuilders.CollectionsBuilders"]},{"name":"fun ExceptionBuilders(klass: ExceptionClass, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.ExceptionBuilders.ExceptionBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-builders/-exception-builders.html","searchKeys":["ExceptionBuilders","fun ExceptionBuilders(klass: ExceptionClass, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.ExceptionBuilders.ExceptionBuilders"]},{"name":"fun ExceptionBuildersWithCause(klass: ExceptionClassWithCause, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.ExceptionBuildersWithCause.ExceptionBuildersWithCause","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-builders-with-cause/-exception-builders-with-cause.html","searchKeys":["ExceptionBuildersWithCause","fun ExceptionBuildersWithCause(klass: ExceptionClassWithCause, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.ExceptionBuildersWithCause.ExceptionBuildersWithCause"]},{"name":"fun FqName.descendant(id: String): FqName","description":"com.rnett.plugin.naming.descendant","location":"-compiler -plugin -utils/com.rnett.plugin.naming/descendant.html","searchKeys":["descendant","fun FqName.descendant(id: String): FqName","com.rnett.plugin.naming.descendant"]},{"name":"fun IrBuilderWithScope.irJsExprBody(expression: IrExpression, useExprOnJvm: Boolean = false): IrBody","description":"com.rnett.plugin.ir.irJsExprBody","location":"-compiler -plugin -utils/com.rnett.plugin.ir/ir-js-expr-body.html","searchKeys":["irJsExprBody","fun IrBuilderWithScope.irJsExprBody(expression: IrExpression, useExprOnJvm: Boolean = false): IrBody","com.rnett.plugin.ir.irJsExprBody"]},{"name":"fun IrBuilderWithScope.irTry(result: IrExpression, type: IrType = result.type): IrTry","description":"com.rnett.plugin.ir.irTry","location":"-compiler -plugin -utils/com.rnett.plugin.ir/ir-try.html","searchKeys":["irTry","fun IrBuilderWithScope.irTry(result: IrExpression, type: IrType = result.type): IrTry","com.rnett.plugin.ir.irTry"]},{"name":"fun IrBuilderWithScope.irTry(result: IrExpression, type: IrType, catches: List<IrCatch>, finally: IrExpression? = null): IrTry","description":"com.rnett.plugin.ir.irTry","location":"-compiler -plugin -utils/com.rnett.plugin.ir/ir-try.html","searchKeys":["irTry","fun IrBuilderWithScope.irTry(result: IrExpression, type: IrType, catches: List<IrCatch>, finally: IrExpression? = null): IrTry","com.rnett.plugin.ir.irTry"]},{"name":"fun IrBuilderWithScope.irVararg(elementType: IrType, elements: Iterable<IrExpression>): IrVararg","description":"com.rnett.plugin.ir.irVararg","location":"-compiler -plugin -utils/com.rnett.plugin.ir/ir-vararg.html","searchKeys":["irVararg","fun IrBuilderWithScope.irVararg(elementType: IrType, elements: Iterable<IrExpression>): IrVararg","com.rnett.plugin.ir.irVararg"]},{"name":"fun IrCall.substituteTypeParams(): IrCall","description":"com.rnett.plugin.ir.substituteTypeParams","location":"-compiler -plugin -utils/com.rnett.plugin.ir/substitute-type-params.html","searchKeys":["substituteTypeParams","fun IrCall.substituteTypeParams(): IrCall","com.rnett.plugin.ir.substituteTypeParams"]},{"name":"fun IrCall.valueArgumentsByName(): Map<String, IrExpression?>","description":"com.rnett.plugin.ir.valueArgumentsByName","location":"-compiler -plugin -utils/com.rnett.plugin.ir/value-arguments-by-name.html","searchKeys":["valueArgumentsByName","fun IrCall.valueArgumentsByName(): Map<String, IrExpression?>","com.rnett.plugin.ir.valueArgumentsByName"]},{"name":"fun IrClass.typeWith(arguments: List<IrTypeArgument>): IrSimpleType","description":"com.rnett.plugin.ir.typeWith","location":"-compiler -plugin -utils/com.rnett.plugin.ir/type-with.html","searchKeys":["typeWith","fun IrClass.typeWith(arguments: List<IrTypeArgument>): IrSimpleType","com.rnett.plugin.ir.typeWith"]},{"name":"fun IrClassifierSymbol.typeWith(arguments: List<IrTypeArgument>): IrSimpleType","description":"com.rnett.plugin.ir.typeWith","location":"-compiler -plugin -utils/com.rnett.plugin.ir/type-with.html","searchKeys":["typeWith","fun IrClassifierSymbol.typeWith(arguments: List<IrTypeArgument>): IrSimpleType","com.rnett.plugin.ir.typeWith"]},{"name":"fun IrGeneratorContext.createIrBuilder(symbol: IrSymbol, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): DeclarationIrBuilder","description":"com.rnett.plugin.ir.createIrBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.ir/create-ir-builder.html","searchKeys":["createIrBuilder","fun IrGeneratorContext.createIrBuilder(symbol: IrSymbol, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): DeclarationIrBuilder","com.rnett.plugin.ir.createIrBuilder"]},{"name":"fun IrMemberAccessExpression<*>.putTypeArguments(vararg args: IrType?, substitute: Boolean = this is IrCall)","description":"com.rnett.plugin.ir.putTypeArguments","location":"-compiler -plugin -utils/com.rnett.plugin.ir/put-type-arguments.html","searchKeys":["putTypeArguments","fun IrMemberAccessExpression<*>.putTypeArguments(vararg args: IrType?, substitute: Boolean = this is IrCall)","com.rnett.plugin.ir.putTypeArguments"]},{"name":"fun IrMemberAccessExpression<*>.putTypeArguments(vararg namedArgs: Pair<String, IrType?>, substitute: Boolean = this is IrCall)","description":"com.rnett.plugin.ir.putTypeArguments","location":"-compiler -plugin -utils/com.rnett.plugin.ir/put-type-arguments.html","searchKeys":["putTypeArguments","fun IrMemberAccessExpression<*>.putTypeArguments(vararg namedArgs: Pair<String, IrType?>, substitute: Boolean = this is IrCall)","com.rnett.plugin.ir.putTypeArguments"]},{"name":"fun IrMemberAccessExpression<*>.putValueArguments(vararg args: IrExpression?, substitute: Boolean = this is IrCall)","description":"com.rnett.plugin.ir.putValueArguments","location":"-compiler -plugin -utils/com.rnett.plugin.ir/put-value-arguments.html","searchKeys":["putValueArguments","fun IrMemberAccessExpression<*>.putValueArguments(vararg args: IrExpression?, substitute: Boolean = this is IrCall)","com.rnett.plugin.ir.putValueArguments"]},{"name":"fun IrMemberAccessExpression<*>.putValueArguments(vararg namedArgs: Pair<String, IrExpression?>, substitute: Boolean = this is IrCall)","description":"com.rnett.plugin.ir.putValueArguments","location":"-compiler -plugin -utils/com.rnett.plugin.ir/put-value-arguments.html","searchKeys":["putValueArguments","fun IrMemberAccessExpression<*>.putValueArguments(vararg namedArgs: Pair<String, IrExpression?>, substitute: Boolean = this is IrCall)","com.rnett.plugin.ir.putValueArguments"]},{"name":"fun IrTransformer(context: IrPluginContext, messageCollector: MessageCollector)","description":"com.rnett.plugin.ir.IrTransformer.IrTransformer","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-transformer/-ir-transformer.html","searchKeys":["IrTransformer","fun IrTransformer(context: IrPluginContext, messageCollector: MessageCollector)","com.rnett.plugin.ir.IrTransformer.IrTransformer"]},{"name":"fun IrTryBuilder(builder: IrBuilderWithScope)","description":"com.rnett.plugin.ir.IrTryBuilder.IrTryBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-try-builder/-ir-try-builder.html","searchKeys":["IrTryBuilder","fun IrTryBuilder(builder: IrBuilderWithScope)","com.rnett.plugin.ir.IrTryBuilder.IrTryBuilder"]},{"name":"fun IrType.hasTypeArgument(index: Int): Boolean","description":"com.rnett.plugin.ir.hasTypeArgument","location":"-compiler -plugin -utils/com.rnett.plugin.ir/has-type-argument.html","searchKeys":["hasTypeArgument","fun IrType.hasTypeArgument(index: Int): Boolean","com.rnett.plugin.ir.hasTypeArgument"]},{"name":"fun IrType.isClassifierOf(classRef: ClassRef): Boolean","description":"com.rnett.plugin.naming.isClassifierOf","location":"-compiler -plugin -utils/com.rnett.plugin.naming/is-classifier-of.html","searchKeys":["isClassifierOf","fun IrType.isClassifierOf(classRef: ClassRef): Boolean","com.rnett.plugin.naming.isClassifierOf"]},{"name":"fun IrType.raiseTo(classifier: IrClassifierSymbol): IrType","description":"com.rnett.plugin.ir.raiseTo","location":"-compiler -plugin -utils/com.rnett.plugin.ir/raise-to.html","searchKeys":["raiseTo","fun IrType.raiseTo(classifier: IrClassifierSymbol): IrType","com.rnett.plugin.ir.raiseTo"]},{"name":"fun IrType.raiseToOrNull(classifier: IrClassifierSymbol): IrType?","description":"com.rnett.plugin.ir.raiseToOrNull","location":"-compiler -plugin -utils/com.rnett.plugin.ir/raise-to-or-null.html","searchKeys":["raiseToOrNull","fun IrType.raiseToOrNull(classifier: IrClassifierSymbol): IrType?","com.rnett.plugin.ir.raiseToOrNull"]},{"name":"fun IrType.supertypesWithSubstitution(): List<IrType>","description":"com.rnett.plugin.ir.supertypesWithSubstitution","location":"-compiler -plugin -utils/com.rnett.plugin.ir/supertypes-with-substitution.html","searchKeys":["supertypesWithSubstitution","fun IrType.supertypesWithSubstitution(): List<IrType>","com.rnett.plugin.ir.supertypesWithSubstitution"]},{"name":"fun IrType.typeArgument(index: Int): IrType","description":"com.rnett.plugin.ir.typeArgument","location":"-compiler -plugin -utils/com.rnett.plugin.ir/type-argument.html","searchKeys":["typeArgument","fun IrType.typeArgument(index: Int): IrType","com.rnett.plugin.ir.typeArgument"]},{"name":"fun IterableBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Collections.Iterable)","description":"com.rnett.plugin.stdlib.IterableBuilders.IterableBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-iterable-builders/-iterable-builders.html","searchKeys":["IterableBuilders","fun IterableBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Collections.Iterable)","com.rnett.plugin.stdlib.IterableBuilders.IterableBuilders"]},{"name":"fun KCallable<*>.fqName(): FqName","description":"com.rnett.plugin.naming.fqName","location":"-compiler -plugin -utils/com.rnett.plugin.naming/fq-name.html","searchKeys":["fqName","fun KCallable<*>.fqName(): FqName","com.rnett.plugin.naming.fqName"]},{"name":"fun KClass<*>.fqName(): FqName","description":"com.rnett.plugin.naming.fqName","location":"-compiler -plugin -utils/com.rnett.plugin.naming/fq-name.html","searchKeys":["fqName","fun KClass<*>.fqName(): FqName","com.rnett.plugin.naming.fqName"]},{"name":"fun KClassBuilders()","description":"com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.KClassBuilders.KClassBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-reflect-builders/-k-class-builders/-k-class-builders.html","searchKeys":["KClassBuilders","fun KClassBuilders()","com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.KClassBuilders.KClassBuilders"]},{"name":"fun ListBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Collections.List)","description":"com.rnett.plugin.stdlib.ListBuilders.ListBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/-list-builders.html","searchKeys":["ListBuilders","fun ListBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Collections.List)","com.rnett.plugin.stdlib.ListBuilders.ListBuilders"]},{"name":"fun MapBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Collections.Map)","description":"com.rnett.plugin.stdlib.MapBuilders.MapBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/-map-builders.html","searchKeys":["MapBuilders","fun MapBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Collections.Map)","com.rnett.plugin.stdlib.MapBuilders.MapBuilders"]},{"name":"fun MathableBuilders(mathable: Kotlin.Mathable, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.MathableBuilders.MathableBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mathable-builders/-mathable-builders.html","searchKeys":["MathableBuilders","fun MathableBuilders(mathable: Kotlin.Mathable, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.MathableBuilders.MathableBuilders"]},{"name":"fun MethodBuilder(builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.MethodBuilder.MethodBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-method-builder/-method-builder.html","searchKeys":["MethodBuilder","fun MethodBuilder(builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.MethodBuilder.MethodBuilder"]},{"name":"fun MutableListBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.MutableListBuilders.MutableListBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/-mutable-list-builders.html","searchKeys":["MutableListBuilders","fun MutableListBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.MutableListBuilders.MutableListBuilders"]},{"name":"fun MutableMapBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.MutableMapBuilders.MutableMapBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-map-builders/-mutable-map-builders.html","searchKeys":["MutableMapBuilders","fun MutableMapBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.MutableMapBuilders.MutableMapBuilders"]},{"name":"fun MutableSetBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.MutableSetBuilders.MutableSetBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-set-builders/-mutable-set-builders.html","searchKeys":["MutableSetBuilders","fun MutableSetBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.MutableSetBuilders.MutableSetBuilders"]},{"name":"fun Namespace.Class(): PropertyDelegateProvider<Any?, ClassRef>","description":"com.rnett.plugin.naming.Class","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class.html","searchKeys":["Class","fun Namespace.Class(): PropertyDelegateProvider<Any?, ClassRef>","com.rnett.plugin.naming.Class"]},{"name":"fun Namespace.Class(name: String): ClassRef","description":"com.rnett.plugin.naming.Class","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class.html","searchKeys":["Class","fun Namespace.Class(name: String): ClassRef","com.rnett.plugin.naming.Class"]},{"name":"fun Namespace.function(filter: FunctionFilter.() -> Unit = {}): FunctionRefDelegate","description":"com.rnett.plugin.naming.function","location":"-compiler -plugin -utils/com.rnett.plugin.naming/function.html","searchKeys":["function","fun Namespace.function(filter: FunctionFilter.() -> Unit = {}): FunctionRefDelegate","com.rnett.plugin.naming.function"]},{"name":"fun Namespace.function(name: String, filter: FunctionFilter.() -> Unit = {}): FunctionRef","description":"com.rnett.plugin.naming.function","location":"-compiler -plugin -utils/com.rnett.plugin.naming/function.html","searchKeys":["function","fun Namespace.function(name: String, filter: FunctionFilter.() -> Unit = {}): FunctionRef","com.rnett.plugin.naming.function"]},{"name":"fun Namespace.property(filter: PropertyFilter.() -> Unit = {}): PropertyRefDelegate","description":"com.rnett.plugin.naming.property","location":"-compiler -plugin -utils/com.rnett.plugin.naming/property.html","searchKeys":["property","fun Namespace.property(filter: PropertyFilter.() -> Unit = {}): PropertyRefDelegate","com.rnett.plugin.naming.property"]},{"name":"fun Namespace.property(name: String, filter: PropertyFilter.() -> Unit = {}): PropertyRef","description":"com.rnett.plugin.naming.property","location":"-compiler -plugin -utils/com.rnett.plugin.naming/property.html","searchKeys":["property","fun Namespace.property(name: String, filter: PropertyFilter.() -> Unit = {}): PropertyRef","com.rnett.plugin.naming.property"]},{"name":"fun NumberBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Number)","description":"com.rnett.plugin.stdlib.NumberBuilders.NumberBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-number-builders/-number-builders.html","searchKeys":["NumberBuilders","fun NumberBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Number)","com.rnett.plugin.stdlib.NumberBuilders.NumberBuilders"]},{"name":"fun PackageRef()","description":"com.rnett.plugin.naming.PackageRef.PackageRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-package-ref/-package-ref.html","searchKeys":["PackageRef","fun PackageRef()","com.rnett.plugin.naming.PackageRef.PackageRef"]},{"name":"fun PackageRef(name: String)","description":"com.rnett.plugin.naming.PackageRef.PackageRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-package-ref/-package-ref.html","searchKeys":["PackageRef","fun PackageRef(name: String)","com.rnett.plugin.naming.PackageRef.PackageRef"]},{"name":"fun PackageRef(name: String, parent: Namespace?)","description":"com.rnett.plugin.naming.PackageRef.PackageRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-package-ref/-package-ref.html","searchKeys":["PackageRef","fun PackageRef(name: String, parent: Namespace?)","com.rnett.plugin.naming.PackageRef.PackageRef"]},{"name":"fun PackageRef.constructor(className: String, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","description":"com.rnett.plugin.naming.constructor","location":"-compiler -plugin -utils/com.rnett.plugin.naming/constructor.html","searchKeys":["constructor","fun PackageRef.constructor(className: String, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","com.rnett.plugin.naming.constructor"]},{"name":"fun PackageRef.primaryConstructor(className: String, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","description":"com.rnett.plugin.naming.primaryConstructor","location":"-compiler -plugin -utils/com.rnett.plugin.naming/primary-constructor.html","searchKeys":["primaryConstructor","fun PackageRef.primaryConstructor(className: String, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","com.rnett.plugin.naming.primaryConstructor"]},{"name":"fun ReflectBuilders()","description":"com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.ReflectBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-reflect-builders/-reflect-builders.html","searchKeys":["ReflectBuilders","fun ReflectBuilders()","com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.ReflectBuilders"]},{"name":"fun RootPackage(name: String)","description":"com.rnett.plugin.naming.RootPackage.RootPackage","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-root-package/-root-package.html","searchKeys":["RootPackage","fun RootPackage(name: String)","com.rnett.plugin.naming.RootPackage.RootPackage"]},{"name":"fun RootPackage.constructor(className: String, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","description":"com.rnett.plugin.naming.constructor","location":"-compiler -plugin -utils/com.rnett.plugin.naming/constructor.html","searchKeys":["constructor","fun RootPackage.constructor(className: String, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","com.rnett.plugin.naming.constructor"]},{"name":"fun RootPackage.primaryConstructor(className: String, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","description":"com.rnett.plugin.naming.primaryConstructor","location":"-compiler -plugin -utils/com.rnett.plugin.naming/primary-constructor.html","searchKeys":["primaryConstructor","fun RootPackage.primaryConstructor(className: String, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","com.rnett.plugin.naming.primaryConstructor"]},{"name":"fun SetBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Collections.Set)","description":"com.rnett.plugin.stdlib.SetBuilders.SetBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/-set-builders.html","searchKeys":["SetBuilders","fun SetBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef = Kotlin.Collections.Set)","com.rnett.plugin.stdlib.SetBuilders.SetBuilders"]},{"name":"fun StdlibBuilders(builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.StdlibBuilders.StdlibBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-stdlib-builders.html","searchKeys":["StdlibBuilders","fun StdlibBuilders(builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.StdlibBuilders.StdlibBuilders"]},{"name":"fun TypeRef(classifier: ClassRef, nullable: Boolean, arguments: List<TypeProjectionRef>, variance: TypeRefVariance)","description":"com.rnett.plugin.naming.TypeRef.TypeRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/-type-ref.html","searchKeys":["TypeRef","fun TypeRef(classifier: ClassRef, nullable: Boolean, arguments: List<TypeProjectionRef>, variance: TypeRefVariance)","com.rnett.plugin.naming.TypeRef.TypeRef"]},{"name":"fun TypedMethodBuilder(supertype: ClassRef, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.TypedMethodBuilder.TypedMethodBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-typed-method-builder/-typed-method-builder.html","searchKeys":["TypedMethodBuilder","fun TypedMethodBuilder(supertype: ClassRef, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.TypedMethodBuilder.TypedMethodBuilder"]},{"name":"fun TypedMethodBuilder(supertype: IrClass, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.TypedMethodBuilder.TypedMethodBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-typed-method-builder/-typed-method-builder.html","searchKeys":["TypedMethodBuilder","fun TypedMethodBuilder(supertype: IrClass, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.TypedMethodBuilder.TypedMethodBuilder"]},{"name":"fun TypedMethodBuilder(supertype: IrClassSymbol, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.TypedMethodBuilder.TypedMethodBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-typed-method-builder/-typed-method-builder.html","searchKeys":["TypedMethodBuilder","fun TypedMethodBuilder(supertype: IrClassSymbol, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.TypedMethodBuilder.TypedMethodBuilder"]},{"name":"fun TypedMethodBuilder(supertype: IrType, builder: IrBuilderWithScope, context: IrPluginContext)","description":"com.rnett.plugin.stdlib.TypedMethodBuilder.TypedMethodBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-typed-method-builder/-typed-method-builder.html","searchKeys":["TypedMethodBuilder","fun TypedMethodBuilder(supertype: IrType, builder: IrBuilderWithScope, context: IrPluginContext)","com.rnett.plugin.stdlib.TypedMethodBuilder.TypedMethodBuilder"]},{"name":"fun TypedMethodBuilder(typeCheck: (IrType) -> Boolean, builder: IrBuilderWithScope, context: IrPluginContext, message: (IrExpression) -> String = { \"Expression $it did not pass type check, type was ${it.type}\" })","description":"com.rnett.plugin.stdlib.TypedMethodBuilder.TypedMethodBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-typed-method-builder/-typed-method-builder.html","searchKeys":["TypedMethodBuilder","fun TypedMethodBuilder(typeCheck: (IrType) -> Boolean, builder: IrBuilderWithScope, context: IrPluginContext, message: (IrExpression) -> String = { \"Expression $it did not pass type check, type was ${it.type}\" })","com.rnett.plugin.stdlib.TypedMethodBuilder.TypedMethodBuilder"]},{"name":"fun add(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableListBuilders.add","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/add.html","searchKeys":["add","fun add(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableListBuilders.add"]},{"name":"fun add(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableSetBuilders.add","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-set-builders/add.html","searchKeys":["add","fun add(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableSetBuilders.add"]},{"name":"fun addAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableListBuilders.addAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/add-all.html","searchKeys":["addAll","fun addAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableListBuilders.addAll"]},{"name":"fun addAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableSetBuilders.addAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-set-builders/add-all.html","searchKeys":["addAll","fun addAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableSetBuilders.addAll"]},{"name":"fun addAll(receiver: IrExpression, items: Iterable<IrExpression>, itemType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableListBuilders.addAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/add-all.html","searchKeys":["addAll","fun addAll(receiver: IrExpression, items: Iterable<IrExpression>, itemType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableListBuilders.addAll"]},{"name":"fun addAll(receiver: IrExpression, items: Iterable<IrExpression>, itemType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableSetBuilders.addAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-set-builders/add-all.html","searchKeys":["addAll","fun addAll(receiver: IrExpression, items: Iterable<IrExpression>, itemType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableSetBuilders.addAll"]},{"name":"fun also(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.also","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/also.html","searchKeys":["also","fun also(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.also"]},{"name":"fun apply(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.apply","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/apply.html","searchKeys":["apply","fun apply(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.apply"]},{"name":"fun clear(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableListBuilders.clear","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/clear.html","searchKeys":["clear","fun clear(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableListBuilders.clear"]},{"name":"fun clear(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableMapBuilders.clear","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-map-builders/clear.html","searchKeys":["clear","fun clear(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableMapBuilders.clear"]},{"name":"fun clear(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableSetBuilders.clear","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-set-builders/clear.html","searchKeys":["clear","fun clear(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableSetBuilders.clear"]},{"name":"fun constructor(fqClassName: FqName, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","description":"com.rnett.plugin.naming.constructor","location":"-compiler -plugin -utils/com.rnett.plugin.naming/constructor.html","searchKeys":["constructor","fun constructor(fqClassName: FqName, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","com.rnett.plugin.naming.constructor"]},{"name":"fun constructor(ref: KClass<*>, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","description":"com.rnett.plugin.naming.constructor","location":"-compiler -plugin -utils/com.rnett.plugin.naming/constructor.html","searchKeys":["constructor","fun constructor(ref: KClass<*>, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","com.rnett.plugin.naming.constructor"]},{"name":"fun contains(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ListBuilders.contains","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/contains.html","searchKeys":["contains","fun contains(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ListBuilders.contains"]},{"name":"fun contains(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.SetBuilders.contains","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/contains.html","searchKeys":["contains","fun contains(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.SetBuilders.contains"]},{"name":"fun containsAll(receiver: IrExpression, elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.SetBuilders.containsAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/contains-all.html","searchKeys":["containsAll","fun containsAll(receiver: IrExpression, elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.SetBuilders.containsAll"]},{"name":"fun containsAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.SetBuilders.containsAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/contains-all.html","searchKeys":["containsAll","fun containsAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.SetBuilders.containsAll"]},{"name":"fun containsKey(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.containsKey","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/contains-key.html","searchKeys":["containsKey","fun containsKey(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.containsKey"]},{"name":"fun containsValue(receiver: IrExpression, value: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.containsValue","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/contains-value.html","searchKeys":["containsValue","fun containsValue(receiver: IrExpression, value: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.containsValue"]},{"name":"fun div(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MathableBuilders.div","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mathable-builders/div.html","searchKeys":["div","fun div(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MathableBuilders.div"]},{"name":"fun emptyList(elementType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.emptyList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/empty-list.html","searchKeys":["emptyList","fun emptyList(elementType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.emptyList"]},{"name":"fun emptyMap(keyType: IrType, valueType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.emptyMap","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/empty-map.html","searchKeys":["emptyMap","fun emptyMap(keyType: IrType, valueType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.emptyMap"]},{"name":"fun emptyMutableList(elementType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.emptyMutableList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/empty-mutable-list.html","searchKeys":["emptyMutableList","fun emptyMutableList(elementType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.emptyMutableList"]},{"name":"fun emptyMutableMap(keyType: IrType, valueType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.emptyMutableMap","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/empty-mutable-map.html","searchKeys":["emptyMutableMap","fun emptyMutableMap(keyType: IrType, valueType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.emptyMutableMap"]},{"name":"fun emptyMutableSet(elementType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.emptyMutableSet","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/empty-mutable-set.html","searchKeys":["emptyMutableSet","fun emptyMutableSet(elementType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.emptyMutableSet"]},{"name":"fun emptySet(elementType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.emptySet","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/empty-set.html","searchKeys":["emptySet","fun emptySet(elementType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.emptySet"]},{"name":"fun entries(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","description":"com.rnett.plugin.stdlib.MapBuilders.entries","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/entries.html","searchKeys":["entries","fun entries(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","com.rnett.plugin.stdlib.MapBuilders.entries"]},{"name":"fun function(fqName: FqName, filter: FunctionFilter.() -> Unit = {}): FunctionRef","description":"com.rnett.plugin.naming.function","location":"-compiler -plugin -utils/com.rnett.plugin.naming/function.html","searchKeys":["function","fun function(fqName: FqName, filter: FunctionFilter.() -> Unit = {}): FunctionRef","com.rnett.plugin.naming.function"]},{"name":"fun function(ref: KFunction<*>, filter: FunctionFilter.() -> Unit = {}): FunctionRef","description":"com.rnett.plugin.naming.function","location":"-compiler -plugin -utils/com.rnett.plugin.naming/function.html","searchKeys":["function","fun function(ref: KFunction<*>, filter: FunctionFilter.() -> Unit = {}): FunctionRef","com.rnett.plugin.naming.function"]},{"name":"fun get(receiver: IrExpression, index: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ListBuilders.get","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/get.html","searchKeys":["get","fun get(receiver: IrExpression, index: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ListBuilders.get"]},{"name":"fun get(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.get","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/get.html","searchKeys":["get","fun get(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.get"]},{"name":"fun getCause(exception: IrExpression, startOffset: Int, endOffset: Int): IrExpression","description":"com.rnett.plugin.stdlib.ExceptionBuilders.getCause","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-builders/get-cause.html","searchKeys":["getCause","fun getCause(exception: IrExpression, startOffset: Int, endOffset: Int): IrExpression","com.rnett.plugin.stdlib.ExceptionBuilders.getCause"]},{"name":"fun getFqName(element: KCallable<*>): FqName","description":"com.rnett.plugin.naming.getFqName","location":"-compiler -plugin -utils/com.rnett.plugin.naming/get-fq-name.html","searchKeys":["getFqName","fun getFqName(element: KCallable<*>): FqName","com.rnett.plugin.naming.getFqName"]},{"name":"fun getFqName(element: KClass<*>): FqName","description":"com.rnett.plugin.naming.getFqName","location":"-compiler -plugin -utils/com.rnett.plugin.naming/get-fq-name.html","searchKeys":["getFqName","fun getFqName(element: KClass<*>): FqName","com.rnett.plugin.naming.getFqName"]},{"name":"fun getMessage(exception: IrExpression, startOffset: Int, endOffset: Int): IrExpression","description":"com.rnett.plugin.stdlib.ExceptionBuilders.getMessage","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-builders/get-message.html","searchKeys":["getMessage","fun getMessage(exception: IrExpression, startOffset: Int, endOffset: Int): IrExpression","com.rnett.plugin.stdlib.ExceptionBuilders.getMessage"]},{"name":"fun getOrDefault(receiver: IrExpression, key: IrExpression, default: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.getOrDefault","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/get-or-default.html","searchKeys":["getOrDefault","fun getOrDefault(receiver: IrExpression, key: IrExpression, default: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.getOrDefault"]},{"name":"fun getOrElse(receiver: IrExpression, key: IrExpression, valueType: IrType = receiver.type.raiseToOrNull { it.isClassifierOf(Kotlin.Collections.Map) }\n            ?.safeAs<IrSimpleType>()?.arguments?.get(1)?.typeOrNull\n            ?: error(\"Can't auto-detect value type, must specify\"), startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, otherwise: IrBlockBodyBuilder.() -> Unit): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.getOrElse","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/get-or-else.html","searchKeys":["getOrElse","fun getOrElse(receiver: IrExpression, key: IrExpression, valueType: IrType = receiver.type.raiseToOrNull { it.isClassifierOf(Kotlin.Collections.Map) }\n            ?.safeAs<IrSimpleType>()?.arguments?.get(1)?.typeOrNull\n            ?: error(\"Can't auto-detect value type, must specify\"), startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, otherwise: IrBlockBodyBuilder.() -> Unit): IrCall","com.rnett.plugin.stdlib.MapBuilders.getOrElse"]},{"name":"fun getOrElseExpr(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, otherwise: IrBuilderWithScope.() -> IrExpression): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.getOrElseExpr","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/get-or-else-expr.html","searchKeys":["getOrElseExpr","fun getOrElseExpr(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, otherwise: IrBuilderWithScope.() -> IrExpression): IrCall","com.rnett.plugin.stdlib.MapBuilders.getOrElseExpr"]},{"name":"fun getOrPut(receiver: IrExpression, key: IrExpression, valueType: IrType = receiver.type.raiseToOrNull { it.isClassifierOf(Kotlin.Collections.MutableMap) }\n            ?.safeAs<IrSimpleType>()?.arguments?.get(1)?.typeOrNull\n            ?: error(\"Can't auto-detect value type, must specify\"), startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, otherwise: IrBlockBodyBuilder.() -> Unit): IrCall","description":"com.rnett.plugin.stdlib.MutableMapBuilders.getOrPut","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-map-builders/get-or-put.html","searchKeys":["getOrPut","fun getOrPut(receiver: IrExpression, key: IrExpression, valueType: IrType = receiver.type.raiseToOrNull { it.isClassifierOf(Kotlin.Collections.MutableMap) }\n            ?.safeAs<IrSimpleType>()?.arguments?.get(1)?.typeOrNull\n            ?: error(\"Can't auto-detect value type, must specify\"), startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, otherwise: IrBlockBodyBuilder.() -> Unit): IrCall","com.rnett.plugin.stdlib.MutableMapBuilders.getOrPut"]},{"name":"fun getOrPutExpr(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, otherwise: IrBuilderWithScope.() -> IrExpression): IrCall","description":"com.rnett.plugin.stdlib.MutableMapBuilders.getOrPutExpr","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-map-builders/get-or-put-expr.html","searchKeys":["getOrPutExpr","fun getOrPutExpr(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, otherwise: IrBuilderWithScope.() -> IrExpression): IrCall","com.rnett.plugin.stdlib.MutableMapBuilders.getOrPutExpr"]},{"name":"fun getValue(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.getValue","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/get-value.html","searchKeys":["getValue","fun getValue(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.getValue"]},{"name":"fun hashCode(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.AnyBuilders.hashCode","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-any-builders/hash-code.html","searchKeys":["hashCode","fun hashCode(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.AnyBuilders.hashCode"]},{"name":"fun indexOf(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ListBuilders.indexOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/index-of.html","searchKeys":["indexOf","fun indexOf(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ListBuilders.indexOf"]},{"name":"fun interface FunctionRemapper","description":"com.rnett.plugin.ir.FunctionRemapper","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-function-remapper/index.html","searchKeys":["FunctionRemapper","fun interface FunctionRemapper","com.rnett.plugin.ir.FunctionRemapper"]},{"name":"fun interface ValueRemapper : ReferenceRemapper","description":"com.rnett.plugin.ir.ValueRemapper","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-value-remapper/index.html","searchKeys":["ValueRemapper","fun interface ValueRemapper : ReferenceRemapper","com.rnett.plugin.ir.ValueRemapper"]},{"name":"fun irCatch(throwableType: IrType, body: IrBuilderWithScope.(IrVariable) -> IrExpression)","description":"com.rnett.plugin.ir.IrTryBuilder.irCatch","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-try-builder/ir-catch.html","searchKeys":["irCatch","fun irCatch(throwableType: IrType, body: IrBuilderWithScope.(IrVariable) -> IrExpression)","com.rnett.plugin.ir.IrTryBuilder.irCatch"]},{"name":"fun irFinally(expression: IrExpression)","description":"com.rnett.plugin.ir.IrTryBuilder.irFinally","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-try-builder/ir-finally.html","searchKeys":["irFinally","fun irFinally(expression: IrExpression)","com.rnett.plugin.ir.IrTryBuilder.irFinally"]},{"name":"fun isEmpty(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ListBuilders.isEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/is-empty.html","searchKeys":["isEmpty","fun isEmpty(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ListBuilders.isEmpty"]},{"name":"fun isEmpty(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.isEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/is-empty.html","searchKeys":["isEmpty","fun isEmpty(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.isEmpty"]},{"name":"fun isEmpty(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.SetBuilders.isEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/is-empty.html","searchKeys":["isEmpty","fun isEmpty(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.SetBuilders.isEmpty"]},{"name":"fun isInstance(value: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.KClassBuilders.isInstance","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-reflect-builders/-k-class-builders/is-instance.html","searchKeys":["isInstance","fun isInstance(value: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.KClassBuilders.isInstance"]},{"name":"fun iterator(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ListBuilders.iterator","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/iterator.html","searchKeys":["iterator","fun iterator(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ListBuilders.iterator"]},{"name":"fun iterator(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.SetBuilders.iterator","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/iterator.html","searchKeys":["iterator","fun iterator(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.SetBuilders.iterator"]},{"name":"fun keys(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","description":"com.rnett.plugin.stdlib.MapBuilders.keys","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/keys.html","searchKeys":["keys","fun keys(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","com.rnett.plugin.stdlib.MapBuilders.keys"]},{"name":"fun let(receiver: IrExpression, returnType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.let","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/let.html","searchKeys":["let","fun let(receiver: IrExpression, returnType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.let"]},{"name":"fun letExpr(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: DeclarationIrBuilder.(IrValueParameter) -> IrExpression): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.letExpr","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/let-expr.html","searchKeys":["letExpr","fun letExpr(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: DeclarationIrBuilder.(IrValueParameter) -> IrExpression): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.letExpr"]},{"name":"fun listOf(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.listOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/list-of.html","searchKeys":["listOf","fun listOf(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.listOf"]},{"name":"fun listOfNotNull(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.listOfNotNull","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/list-of-not-null.html","searchKeys":["listOfNotNull","fun listOfNotNull(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.listOfNotNull"]},{"name":"fun listOfVararg(elementType: IrType, items: IrVararg, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.listOfVararg","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/list-of-vararg.html","searchKeys":["listOfVararg","fun listOfVararg(elementType: IrType, items: IrVararg, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.listOfVararg"]},{"name":"fun listOfVararg(items: IrVararg, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.listOfVararg","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/list-of-vararg.html","searchKeys":["listOfVararg","fun listOfVararg(items: IrVararg, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.listOfVararg"]},{"name":"fun mapOf(keyType: IrType, valueType: IrType, items: Map<IrExpression, IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.mapOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/map-of.html","searchKeys":["mapOf","fun mapOf(keyType: IrType, valueType: IrType, items: Map<IrExpression, IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.mapOf"]},{"name":"fun minus(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MathableBuilders.minus","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mathable-builders/minus.html","searchKeys":["minus","fun minus(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MathableBuilders.minus"]},{"name":"fun minusElement(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ListBuilders.minusElement","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/minus-element.html","searchKeys":["minusElement","fun minusElement(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ListBuilders.minusElement"]},{"name":"fun minusElement(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.SetBuilders.minusElement","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/minus-element.html","searchKeys":["minusElement","fun minusElement(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.SetBuilders.minusElement"]},{"name":"fun minusElementToList(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.IterableBuilders.minusElementToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-iterable-builders/minus-element-to-list.html","searchKeys":["minusElementToList","fun minusElementToList(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.IterableBuilders.minusElementToList"]},{"name":"fun minusIterable(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ListBuilders.minusIterable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/minus-iterable.html","searchKeys":["minusIterable","fun minusIterable(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ListBuilders.minusIterable"]},{"name":"fun minusIterable(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.SetBuilders.minusIterable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/minus-iterable.html","searchKeys":["minusIterable","fun minusIterable(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.SetBuilders.minusIterable"]},{"name":"fun minusIterableKeys(receiver: IrExpression, keys: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.minusIterableKeys","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/minus-iterable-keys.html","searchKeys":["minusIterableKeys","fun minusIterableKeys(receiver: IrExpression, keys: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.minusIterableKeys"]},{"name":"fun minusIterableToList(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.IterableBuilders.minusIterableToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-iterable-builders/minus-iterable-to-list.html","searchKeys":["minusIterableToList","fun minusIterableToList(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.IterableBuilders.minusIterableToList"]},{"name":"fun minusKey(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.minusKey","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/minus-key.html","searchKeys":["minusKey","fun minusKey(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.minusKey"]},{"name":"fun mutableListOf(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.mutableListOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/mutable-list-of.html","searchKeys":["mutableListOf","fun mutableListOf(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.mutableListOf"]},{"name":"fun mutableMapOf(keyType: IrType, valueType: IrType, items: Map<IrExpression, IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.mutableMapOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/mutable-map-of.html","searchKeys":["mutableMapOf","fun mutableMapOf(keyType: IrType, valueType: IrType, items: Map<IrExpression, IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.mutableMapOf"]},{"name":"fun mutableSetOf(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.mutableSetOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/mutable-set-of.html","searchKeys":["mutableSetOf","fun mutableSetOf(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.mutableSetOf"]},{"name":"fun new(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConstructorCall","description":"com.rnett.plugin.stdlib.ExceptionBuilders.new","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-builders/new.html","searchKeys":["new","fun new(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConstructorCall","com.rnett.plugin.stdlib.ExceptionBuilders.new"]},{"name":"fun newWithCause(cause: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConstructorCall","description":"com.rnett.plugin.stdlib.ExceptionBuildersWithCause.newWithCause","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-builders-with-cause/new-with-cause.html","searchKeys":["newWithCause","fun newWithCause(cause: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConstructorCall","com.rnett.plugin.stdlib.ExceptionBuildersWithCause.newWithCause"]},{"name":"fun newWithMessage(message: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConstructorCall","description":"com.rnett.plugin.stdlib.ExceptionBuilders.newWithMessage","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-builders/new-with-message.html","searchKeys":["newWithMessage","fun newWithMessage(message: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConstructorCall","com.rnett.plugin.stdlib.ExceptionBuilders.newWithMessage"]},{"name":"fun newWithMessageAndCause(message: IrExpression, cause: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConstructorCall","description":"com.rnett.plugin.stdlib.ExceptionBuildersWithCause.newWithMessageAndCause","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-builders-with-cause/new-with-message-and-cause.html","searchKeys":["newWithMessageAndCause","fun newWithMessageAndCause(message: IrExpression, cause: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConstructorCall","com.rnett.plugin.stdlib.ExceptionBuildersWithCause.newWithMessageAndCause"]},{"name":"fun plus(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MathableBuilders.plus","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mathable-builders/plus.html","searchKeys":["plus","fun plus(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MathableBuilders.plus"]},{"name":"fun plusElement(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ListBuilders.plusElement","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/plus-element.html","searchKeys":["plusElement","fun plusElement(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ListBuilders.plusElement"]},{"name":"fun plusElement(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.SetBuilders.plusElement","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/plus-element.html","searchKeys":["plusElement","fun plusElement(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.SetBuilders.plusElement"]},{"name":"fun plusElementPair(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.plusElementPair","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/plus-element-pair.html","searchKeys":["plusElementPair","fun plusElementPair(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.plusElementPair"]},{"name":"fun plusElementPairOf(receiver: IrExpression, key: IrExpression, value: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.plusElementPairOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/plus-element-pair-of.html","searchKeys":["plusElementPairOf","fun plusElementPairOf(receiver: IrExpression, key: IrExpression, value: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.plusElementPairOf"]},{"name":"fun plusElementToList(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.IterableBuilders.plusElementToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-iterable-builders/plus-element-to-list.html","searchKeys":["plusElementToList","fun plusElementToList(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.IterableBuilders.plusElementToList"]},{"name":"fun plusIterable(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ListBuilders.plusIterable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/plus-iterable.html","searchKeys":["plusIterable","fun plusIterable(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ListBuilders.plusIterable"]},{"name":"fun plusIterable(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.SetBuilders.plusIterable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/plus-iterable.html","searchKeys":["plusIterable","fun plusIterable(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.SetBuilders.plusIterable"]},{"name":"fun plusIterablePairs(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.plusIterablePairs","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/plus-iterable-pairs.html","searchKeys":["plusIterablePairs","fun plusIterablePairs(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.plusIterablePairs"]},{"name":"fun plusIterableToList(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.IterableBuilders.plusIterableToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-iterable-builders/plus-iterable-to-list.html","searchKeys":["plusIterableToList","fun plusIterableToList(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.IterableBuilders.plusIterableToList"]},{"name":"fun plusMap(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.plusMap","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/plus-map.html","searchKeys":["plusMap","fun plusMap(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.plusMap"]},{"name":"fun primaryConstructor(fqClassName: FqName, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","description":"com.rnett.plugin.naming.primaryConstructor","location":"-compiler -plugin -utils/com.rnett.plugin.naming/primary-constructor.html","searchKeys":["primaryConstructor","fun primaryConstructor(fqClassName: FqName, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","com.rnett.plugin.naming.primaryConstructor"]},{"name":"fun primaryConstructor(ref: KClass<*>, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","description":"com.rnett.plugin.naming.primaryConstructor","location":"-compiler -plugin -utils/com.rnett.plugin.naming/primary-constructor.html","searchKeys":["primaryConstructor","fun primaryConstructor(ref: KClass<*>, filter: ConstructorFilter.() -> Unit = {}): ConstructorRef","com.rnett.plugin.naming.primaryConstructor"]},{"name":"fun property(fqName: FqName, filter: PropertyFilter.() -> Unit = {}): PropertyRef","description":"com.rnett.plugin.naming.property","location":"-compiler -plugin -utils/com.rnett.plugin.naming/property.html","searchKeys":["property","fun property(fqName: FqName, filter: PropertyFilter.() -> Unit = {}): PropertyRef","com.rnett.plugin.naming.property"]},{"name":"fun property(ref: KProperty<*>, filter: PropertyFilter.() -> Unit = {}): PropertyRef","description":"com.rnett.plugin.naming.property","location":"-compiler -plugin -utils/com.rnett.plugin.naming/property.html","searchKeys":["property","fun property(ref: KProperty<*>, filter: PropertyFilter.() -> Unit = {}): PropertyRef","com.rnett.plugin.naming.property"]},{"name":"fun put(receiver: IrExpression, key: IrExpression, value: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableMapBuilders.put","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-map-builders/put.html","searchKeys":["put","fun put(receiver: IrExpression, key: IrExpression, value: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableMapBuilders.put"]},{"name":"fun putAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableMapBuilders.putAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-map-builders/put-all.html","searchKeys":["putAll","fun putAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableMapBuilders.putAll"]},{"name":"fun putAll(receiver: IrExpression, itemsMap: Map<IrExpression, IrExpression>, itemsKeyType: IrType, itemsValueType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableMapBuilders.putAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-map-builders/put-all.html","searchKeys":["putAll","fun putAll(receiver: IrExpression, itemsMap: Map<IrExpression, IrExpression>, itemsKeyType: IrType, itemsValueType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableMapBuilders.putAll"]},{"name":"fun putAllIterable(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableMapBuilders.putAllIterable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-map-builders/put-all-iterable.html","searchKeys":["putAllIterable","fun putAllIterable(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableMapBuilders.putAllIterable"]},{"name":"fun remove(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableListBuilders.remove","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/remove.html","searchKeys":["remove","fun remove(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableListBuilders.remove"]},{"name":"fun remove(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableSetBuilders.remove","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-set-builders/remove.html","searchKeys":["remove","fun remove(receiver: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableSetBuilders.remove"]},{"name":"fun remove(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableMapBuilders.remove","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-map-builders/remove.html","searchKeys":["remove","fun remove(receiver: IrExpression, key: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableMapBuilders.remove"]},{"name":"fun removeAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableListBuilders.removeAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/remove-all.html","searchKeys":["removeAll","fun removeAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableListBuilders.removeAll"]},{"name":"fun removeAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableSetBuilders.removeAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-set-builders/remove-all.html","searchKeys":["removeAll","fun removeAll(receiver: IrExpression, items: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableSetBuilders.removeAll"]},{"name":"fun removeAll(receiver: IrExpression, items: Iterable<IrExpression>, itemType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableListBuilders.removeAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/remove-all.html","searchKeys":["removeAll","fun removeAll(receiver: IrExpression, items: Iterable<IrExpression>, itemType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableListBuilders.removeAll"]},{"name":"fun removeAll(receiver: IrExpression, items: Iterable<IrExpression>, itemType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableSetBuilders.removeAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-set-builders/remove-all.html","searchKeys":["removeAll","fun removeAll(receiver: IrExpression, items: Iterable<IrExpression>, itemType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableSetBuilders.removeAll"]},{"name":"fun removeFirst(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableListBuilders.removeFirst","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/remove-first.html","searchKeys":["removeFirst","fun removeFirst(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableListBuilders.removeFirst"]},{"name":"fun removeLast(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableListBuilders.removeLast","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/remove-last.html","searchKeys":["removeLast","fun removeLast(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableListBuilders.removeLast"]},{"name":"fun resolve(context: IrPluginContext): IrType","description":"com.rnett.plugin.naming.TypeRef.resolve","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/resolve.html","searchKeys":["resolve","fun resolve(context: IrPluginContext): IrType","com.rnett.plugin.naming.TypeRef.resolve"]},{"name":"fun run(receiver: IrExpression, returnType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.run","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/run.html","searchKeys":["run","fun run(receiver: IrExpression, returnType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.run"]},{"name":"fun runExpr(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: DeclarationIrBuilder.(IrValueParameter) -> IrExpression): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.runExpr","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/run-expr.html","searchKeys":["runExpr","fun runExpr(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: DeclarationIrBuilder.(IrValueParameter) -> IrExpression): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.runExpr"]},{"name":"fun set(receiver: IrExpression, index: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MutableListBuilders.set","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/set.html","searchKeys":["set","fun set(receiver: IrExpression, index: IrExpression, item: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MutableListBuilders.set"]},{"name":"fun setOf(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.setOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/set-of.html","searchKeys":["setOf","fun setOf(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.setOf"]},{"name":"fun setOfNotNull(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionsBuilders.setOfNotNull","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/set-of-not-null.html","searchKeys":["setOfNotNull","fun setOfNotNull(elementType: IrType, items: Iterable<IrExpression>, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionsBuilders.setOfNotNull"]},{"name":"fun size(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","description":"com.rnett.plugin.stdlib.ListBuilders.size","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/size.html","searchKeys":["size","fun size(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","com.rnett.plugin.stdlib.ListBuilders.size"]},{"name":"fun size(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","description":"com.rnett.plugin.stdlib.MapBuilders.size","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/size.html","searchKeys":["size","fun size(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","com.rnett.plugin.stdlib.MapBuilders.size"]},{"name":"fun size(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","description":"com.rnett.plugin.stdlib.SetBuilders.size","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/size.html","searchKeys":["size","fun size(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","com.rnett.plugin.stdlib.SetBuilders.size"]},{"name":"fun times(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MathableBuilders.times","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mathable-builders/times.html","searchKeys":["times","fun times(receiver: IrExpression, other: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MathableBuilders.times"]},{"name":"fun to(first: IrExpression, firstType: IrType, second: IrExpression, secondType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.to","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/to.html","searchKeys":["to","fun to(first: IrExpression, firstType: IrType, second: IrExpression, secondType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.to"]},{"name":"fun to(first: IrExpression, second: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.to","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/to.html","searchKeys":["to","fun to(first: IrExpression, second: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.to"]},{"name":"fun toByte(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.NumberBuilders.toByte","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-number-builders/to-byte.html","searchKeys":["toByte","fun toByte(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.NumberBuilders.toByte"]},{"name":"fun toChar(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.NumberBuilders.toChar","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-number-builders/to-char.html","searchKeys":["toChar","fun toChar(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.NumberBuilders.toChar"]},{"name":"fun toDouble(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.NumberBuilders.toDouble","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-number-builders/to-double.html","searchKeys":["toDouble","fun toDouble(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.NumberBuilders.toDouble"]},{"name":"fun toFloat(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.NumberBuilders.toFloat","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-number-builders/to-float.html","searchKeys":["toFloat","fun toFloat(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.NumberBuilders.toFloat"]},{"name":"fun toInt(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.NumberBuilders.toInt","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-number-builders/to-int.html","searchKeys":["toInt","fun toInt(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.NumberBuilders.toInt"]},{"name":"fun toIr(): Variance","description":"com.rnett.plugin.naming.TypeRefVariance.toIr","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref-variance/to-ir.html","searchKeys":["toIr","fun toIr(): Variance","com.rnett.plugin.naming.TypeRefVariance.toIr"]},{"name":"fun toIrType(context: IrPluginContext): IrType","description":"com.rnett.plugin.naming.TypeRef.toIrType","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/to-ir-type.html","searchKeys":["toIrType","fun toIrType(context: IrPluginContext): IrType","com.rnett.plugin.naming.TypeRef.toIrType"]},{"name":"fun toList(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ArrayBuilders.toList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-array-builders/to-list.html","searchKeys":["toList","fun toList(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ArrayBuilders.toList"]},{"name":"fun toList(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.IterableBuilders.toList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-iterable-builders/to-list.html","searchKeys":["toList","fun toList(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.IterableBuilders.toList"]},{"name":"fun toList(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.MapBuilders.toList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/to-list.html","searchKeys":["toList","fun toList(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.MapBuilders.toList"]},{"name":"fun toLong(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.NumberBuilders.toLong","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-number-builders/to-long.html","searchKeys":["toLong","fun toLong(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.NumberBuilders.toLong"]},{"name":"fun toMap(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.IterableBuilders.toMap","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-iterable-builders/to-map.html","searchKeys":["toMap","fun toMap(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.IterableBuilders.toMap"]},{"name":"fun toMutableList(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.ArrayBuilders.toMutableList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-array-builders/to-mutable-list.html","searchKeys":["toMutableList","fun toMutableList(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.ArrayBuilders.toMutableList"]},{"name":"fun toMutableList(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.IterableBuilders.toMutableList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-iterable-builders/to-mutable-list.html","searchKeys":["toMutableList","fun toMutableList(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.IterableBuilders.toMutableList"]},{"name":"fun toShort(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.NumberBuilders.toShort","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-number-builders/to-short.html","searchKeys":["toShort","fun toShort(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.NumberBuilders.toShort"]},{"name":"fun toString(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.AnyBuilders.toString","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-any-builders/to-string.html","searchKeys":["toString","fun toString(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.AnyBuilders.toString"]},{"name":"fun toTypedArray(receiver: IrExpression, elementType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.CollectionBuilders.toTypedArray","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collection-builders/to-typed-array.html","searchKeys":["toTypedArray","fun toTypedArray(receiver: IrExpression, elementType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.CollectionBuilders.toTypedArray"]},{"name":"fun typeOf(type: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.typeOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-reflect-builders/type-of.html","searchKeys":["typeOf","fun typeOf(type: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.typeOf"]},{"name":"fun values(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","description":"com.rnett.plugin.stdlib.MapBuilders.values","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/values.html","searchKeys":["values","fun values(receiver: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionAccessExpression","com.rnett.plugin.stdlib.MapBuilders.values"]},{"name":"fun with(expr: IrExpression, returnType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.with","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/with.html","searchKeys":["with","fun with(expr: IrExpression, returnType: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.with"]},{"name":"fun withExpr(expr: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: DeclarationIrBuilder.(IrValueParameter) -> IrExpression): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.withExpr","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/with-expr.html","searchKeys":["withExpr","fun withExpr(expr: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, body: DeclarationIrBuilder.(IrValueParameter) -> IrExpression): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.withExpr"]},{"name":"fun withUnit(expr: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, blockBodyBuilder: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","description":"com.rnett.plugin.stdlib.StdlibBuilders.withUnit","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/with-unit.html","searchKeys":["withUnit","fun withUnit(expr: IrExpression, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, blockBodyBuilder: IrBlockBodyBuilder.(IrValueParameter) -> Unit): IrCall","com.rnett.plugin.stdlib.StdlibBuilders.withUnit"]},{"name":"infix fun IrType.eq(other: TypeRef): Boolean","description":"com.rnett.plugin.naming.eq","location":"-compiler -plugin -utils/com.rnett.plugin.naming/eq.html","searchKeys":["eq","infix fun IrType.eq(other: TypeRef): Boolean","com.rnett.plugin.naming.eq"]},{"name":"inline fun <T : IrElement> IrGeneratorWithScope.buildStatement(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrStatementOrigin? = null, builder: IrSingleStatementBuilder.() -> T): T","description":"com.rnett.plugin.ir.buildStatement","location":"-compiler -plugin -utils/com.rnett.plugin.ir/build-statement.html","searchKeys":["buildStatement","inline fun <T : IrElement> IrGeneratorWithScope.buildStatement(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrStatementOrigin? = null, builder: IrSingleStatementBuilder.() -> T): T","com.rnett.plugin.ir.buildStatement"]},{"name":"inline fun <T : IrElement> T.deepCopyAndRemapFunctions(initialParent: IrDeclarationParent? = null, referenceRemapper: FunctionRemapper): T","description":"com.rnett.plugin.ir.deepCopyAndRemapFunctions","location":"-compiler -plugin -utils/com.rnett.plugin.ir/deep-copy-and-remap-functions.html","searchKeys":["deepCopyAndRemapFunctions","inline fun <T : IrElement> T.deepCopyAndRemapFunctions(initialParent: IrDeclarationParent? = null, referenceRemapper: FunctionRemapper): T","com.rnett.plugin.ir.deepCopyAndRemapFunctions"]},{"name":"inline fun <T : IrElement> T.deepCopyAndRemapReferences(initialParent: IrDeclarationParent? = null, referenceRemapper: ReferenceRemapper): T","description":"com.rnett.plugin.ir.deepCopyAndRemapReferences","location":"-compiler -plugin -utils/com.rnett.plugin.ir/deep-copy-and-remap-references.html","searchKeys":["deepCopyAndRemapReferences","inline fun <T : IrElement> T.deepCopyAndRemapReferences(initialParent: IrDeclarationParent? = null, referenceRemapper: ReferenceRemapper): T","com.rnett.plugin.ir.deepCopyAndRemapReferences"]},{"name":"inline fun <T : IrElement> T.deepCopyAndRemapReferences(initialParent: IrDeclarationParent? = null, referenceReplacements: ReferenceReplacements.Builder.() -> Unit): T","description":"com.rnett.plugin.ir.deepCopyAndRemapReferences","location":"-compiler -plugin -utils/com.rnett.plugin.ir/deep-copy-and-remap-references.html","searchKeys":["deepCopyAndRemapReferences","inline fun <T : IrElement> T.deepCopyAndRemapReferences(initialParent: IrDeclarationParent? = null, referenceReplacements: ReferenceReplacements.Builder.() -> Unit): T","com.rnett.plugin.ir.deepCopyAndRemapReferences"]},{"name":"inline fun <T : IrElement> T.deepCopyAndRemapValues(initialParent: IrDeclarationParent? = null, referenceRemapper: ValueRemapper): T","description":"com.rnett.plugin.ir.deepCopyAndRemapValues","location":"-compiler -plugin -utils/com.rnett.plugin.ir/deep-copy-and-remap-values.html","searchKeys":["deepCopyAndRemapValues","inline fun <T : IrElement> T.deepCopyAndRemapValues(initialParent: IrDeclarationParent? = null, referenceRemapper: ValueRemapper): T","com.rnett.plugin.ir.deepCopyAndRemapValues"]},{"name":"inline fun <T : IrElement> buildStatement(startOffset: Int, endOffset: Int, block: IrSingleStatementBuilder.() -> T): T","description":"com.rnett.plugin.stdlib.MethodBuilder.buildStatement","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-method-builder/build-statement.html","searchKeys":["buildStatement","inline fun <T : IrElement> buildStatement(startOffset: Int, endOffset: Int, block: IrSingleStatementBuilder.() -> T): T","com.rnett.plugin.stdlib.MethodBuilder.buildStatement"]},{"name":"inline fun <T> HasContext.irTypeOf(): IrType","description":"com.rnett.plugin.ir.irTypeOf","location":"-compiler -plugin -utils/com.rnett.plugin.ir/ir-type-of.html","searchKeys":["irTypeOf","inline fun <T> HasContext.irTypeOf(): IrType","com.rnett.plugin.ir.irTypeOf"]},{"name":"inline fun <T> IrPluginContext.irTypeOf(): IrType","description":"com.rnett.plugin.ir.irTypeOf","location":"-compiler -plugin -utils/com.rnett.plugin.ir/ir-type-of.html","searchKeys":["irTypeOf","inline fun <T> IrPluginContext.irTypeOf(): IrType","com.rnett.plugin.ir.irTypeOf"]},{"name":"inline fun <T> IrType.isClassifierOf(): Boolean","description":"com.rnett.plugin.naming.isClassifierOf","location":"-compiler -plugin -utils/com.rnett.plugin.naming/is-classifier-of.html","searchKeys":["isClassifierOf","inline fun <T> IrType.isClassifierOf(): Boolean","com.rnett.plugin.naming.isClassifierOf"]},{"name":"inline fun <T> IrType.isType(): Boolean","description":"com.rnett.plugin.naming.isType","location":"-compiler -plugin -utils/com.rnett.plugin.naming/is-type.html","searchKeys":["isType","inline fun <T> IrType.isType(): Boolean","com.rnett.plugin.naming.isType"]},{"name":"inline fun <T> typeRef(): TypeRef","description":"com.rnett.plugin.naming.typeRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/type-ref.html","searchKeys":["typeRef","inline fun <T> typeRef(): TypeRef","com.rnett.plugin.naming.typeRef"]},{"name":"inline fun IrBuilderWithScope.irTry(result: IrExpression, type: IrType = result.type, catches: IrTryBuilder.() -> Unit): IrTry","description":"com.rnett.plugin.ir.irTry","location":"-compiler -plugin -utils/com.rnett.plugin.ir/ir-try.html","searchKeys":["irTry","inline fun IrBuilderWithScope.irTry(result: IrExpression, type: IrType = result.type, catches: IrTryBuilder.() -> Unit): IrTry","com.rnett.plugin.ir.irTry"]},{"name":"inline fun IrClass.addAnonymousInitializer(builder: IrAnonymousInitializer.() -> Unit): IrAnonymousInitializer","description":"com.rnett.plugin.ir.addAnonymousInitializer","location":"-compiler -plugin -utils/com.rnett.plugin.ir/add-anonymous-initializer.html","searchKeys":["addAnonymousInitializer","inline fun IrClass.addAnonymousInitializer(builder: IrAnonymousInitializer.() -> Unit): IrAnonymousInitializer","com.rnett.plugin.ir.addAnonymousInitializer"]},{"name":"inline fun IrType.raiseTo(predicate: (IrType) -> Boolean): IrType","description":"com.rnett.plugin.ir.raiseTo","location":"-compiler -plugin -utils/com.rnett.plugin.ir/raise-to.html","searchKeys":["raiseTo","inline fun IrType.raiseTo(predicate: (IrType) -> Boolean): IrType","com.rnett.plugin.ir.raiseTo"]},{"name":"inline fun IrType.raiseToOrNull(predicate: (IrType) -> Boolean): IrType?","description":"com.rnett.plugin.ir.raiseToOrNull","location":"-compiler -plugin -utils/com.rnett.plugin.ir/raise-to-or-null.html","searchKeys":["raiseToOrNull","inline fun IrType.raiseToOrNull(predicate: (IrType) -> Boolean): IrType?","com.rnett.plugin.ir.raiseToOrNull"]},{"name":"inline fun ReferenceReplacements(builder: ReferenceReplacements.Builder.() -> Unit): ReferenceReplacements","description":"com.rnett.plugin.ir.ReferenceReplacements","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements.html","searchKeys":["ReferenceReplacements","inline fun ReferenceReplacements(builder: ReferenceReplacements.Builder.() -> Unit): ReferenceReplacements","com.rnett.plugin.ir.ReferenceReplacements"]},{"name":"inline operator fun <T : IConstructorFilter> T.invoke(builder: IConstructorFilter.() -> Unit): T","description":"com.rnett.plugin.naming.invoke","location":"-compiler -plugin -utils/com.rnett.plugin.naming/invoke.html","searchKeys":["invoke","inline operator fun <T : IConstructorFilter> T.invoke(builder: IConstructorFilter.() -> Unit): T","com.rnett.plugin.naming.invoke"]},{"name":"inline operator fun <T : IFunctionFilter> T.invoke(builder: IFunctionFilter.() -> Unit): T","description":"com.rnett.plugin.naming.invoke","location":"-compiler -plugin -utils/com.rnett.plugin.naming/invoke.html","searchKeys":["invoke","inline operator fun <T : IFunctionFilter> T.invoke(builder: IFunctionFilter.() -> Unit): T","com.rnett.plugin.naming.invoke"]},{"name":"inline operator fun <T : IPropertyFilter> T.invoke(builder: IPropertyFilter.() -> Unit): T","description":"com.rnett.plugin.naming.invoke","location":"-compiler -plugin -utils/com.rnett.plugin.naming/invoke.html","searchKeys":["invoke","inline operator fun <T : IPropertyFilter> T.invoke(builder: IPropertyFilter.() -> Unit): T","com.rnett.plugin.naming.invoke"]},{"name":"inline operator fun getValue(thisRef: Any?, property: KProperty<*>): ClassRef","description":"com.rnett.plugin.naming.ClassRef.getValue","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class-ref/get-value.html","searchKeys":["getValue","inline operator fun getValue(thisRef: Any?, property: KProperty<*>): ClassRef","com.rnett.plugin.naming.ClassRef.getValue"]},{"name":"inline operator fun getValue(thisRef: Any?, property: KProperty<*>): ConstructorRef","description":"com.rnett.plugin.naming.ConstructorRef.getValue","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-ref/get-value.html","searchKeys":["getValue","inline operator fun getValue(thisRef: Any?, property: KProperty<*>): ConstructorRef","com.rnett.plugin.naming.ConstructorRef.getValue"]},{"name":"inline operator fun getValue(thisRef: Any?, property: KProperty<*>): FunctionRef","description":"com.rnett.plugin.naming.FunctionRef.getValue","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-ref/get-value.html","searchKeys":["getValue","inline operator fun getValue(thisRef: Any?, property: KProperty<*>): FunctionRef","com.rnett.plugin.naming.FunctionRef.getValue"]},{"name":"inline operator fun getValue(thisRef: Any?, property: KProperty<*>): PropertyRef","description":"com.rnett.plugin.naming.PropertyRef.getValue","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-ref/get-value.html","searchKeys":["getValue","inline operator fun getValue(thisRef: Any?, property: KProperty<*>): PropertyRef","com.rnett.plugin.naming.PropertyRef.getValue"]},{"name":"inner class KClassBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.KClassBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-reflect-builders/-k-class-builders/index.html","searchKeys":["KClassBuilders","inner class KClassBuilders","com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.KClassBuilders"]},{"name":"inner class ReflectBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-reflect-builders/index.html","searchKeys":["ReflectBuilders","inner class ReflectBuilders","com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders"]},{"name":"interface ExceptionClass","description":"com.rnett.plugin.stdlib.ExceptionClass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-class/index.html","searchKeys":["ExceptionClass","interface ExceptionClass","com.rnett.plugin.stdlib.ExceptionClass"]},{"name":"interface ExceptionClassWithCause : ExceptionClass","description":"com.rnett.plugin.stdlib.ExceptionClassWithCause","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-class-with-cause/index.html","searchKeys":["ExceptionClassWithCause","interface ExceptionClassWithCause : ExceptionClass","com.rnett.plugin.stdlib.ExceptionClassWithCause"]},{"name":"interface HasContext","description":"com.rnett.plugin.ir.HasContext","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/index.html","searchKeys":["HasContext","interface HasContext","com.rnett.plugin.ir.HasContext"]},{"name":"interface IConstructorFilter","description":"com.rnett.plugin.naming.IConstructorFilter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-constructor-filter/index.html","searchKeys":["IConstructorFilter","interface IConstructorFilter","com.rnett.plugin.naming.IConstructorFilter"]},{"name":"interface IFunctionFilter","description":"com.rnett.plugin.naming.IFunctionFilter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/index.html","searchKeys":["IFunctionFilter","interface IFunctionFilter","com.rnett.plugin.naming.IFunctionFilter"]},{"name":"interface IPropertyFilter","description":"com.rnett.plugin.naming.IPropertyFilter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-property-filter/index.html","searchKeys":["IPropertyFilter","interface IPropertyFilter","com.rnett.plugin.naming.IPropertyFilter"]},{"name":"interface KnowsCurrentFile","description":"com.rnett.plugin.ir.KnowsCurrentFile","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/index.html","searchKeys":["KnowsCurrentFile","interface KnowsCurrentFile","com.rnett.plugin.ir.KnowsCurrentFile"]},{"name":"interface Mathable","description":"com.rnett.plugin.stdlib.Kotlin.Mathable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-mathable/index.html","searchKeys":["Mathable","interface Mathable","com.rnett.plugin.stdlib.Kotlin.Mathable"]},{"name":"interface Reference<S : IrBindableSymbol<*, *>>","description":"com.rnett.plugin.naming.Reference","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-reference/index.html","searchKeys":["Reference","interface Reference<S : IrBindableSymbol<*, *>>","com.rnett.plugin.naming.Reference"]},{"name":"interface ReferenceRemapper","description":"com.rnett.plugin.ir.ReferenceRemapper","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/index.html","searchKeys":["ReferenceRemapper","interface ReferenceRemapper","com.rnett.plugin.ir.ReferenceRemapper"]},{"name":"object Any : ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Any","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-any/index.html","searchKeys":["Any","object Any : ClassRef","com.rnett.plugin.stdlib.Kotlin.Any"]},{"name":"object AssertionError : ClassRef, ExceptionClassWithCause","description":"com.rnett.plugin.stdlib.JavaLang.AssertionError","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-assertion-error/index.html","searchKeys":["AssertionError","object AssertionError : ClassRef, ExceptionClassWithCause","com.rnett.plugin.stdlib.JavaLang.AssertionError"]},{"name":"object Byte : ClassRef, Kotlin.Mathable","description":"com.rnett.plugin.stdlib.Kotlin.Byte","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-byte/index.html","searchKeys":["Byte","object Byte : ClassRef, Kotlin.Mathable","com.rnett.plugin.stdlib.Kotlin.Byte"]},{"name":"object ClassCastException : ClassRef, ExceptionClass","description":"com.rnett.plugin.stdlib.JavaLang.ClassCastException","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-class-cast-exception/index.html","searchKeys":["ClassCastException","object ClassCastException : ClassRef, ExceptionClass","com.rnett.plugin.stdlib.JavaLang.ClassCastException"]},{"name":"object Collections : PackageRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/index.html","searchKeys":["Collections","object Collections : PackageRef","com.rnett.plugin.stdlib.Kotlin.Collections"]},{"name":"object Double : ClassRef, Kotlin.Mathable","description":"com.rnett.plugin.stdlib.Kotlin.Double","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-double/index.html","searchKeys":["Double","object Double : ClassRef, Kotlin.Mathable","com.rnett.plugin.stdlib.Kotlin.Double"]},{"name":"object Error : ClassRef, ExceptionClassWithCause","description":"com.rnett.plugin.stdlib.JavaLang.Error","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-error/index.html","searchKeys":["Error","object Error : ClassRef, ExceptionClassWithCause","com.rnett.plugin.stdlib.JavaLang.Error"]},{"name":"object Exception : ClassRef, ExceptionClassWithCause","description":"com.rnett.plugin.stdlib.JavaLang.Exception","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-exception/index.html","searchKeys":["Exception","object Exception : ClassRef, ExceptionClassWithCause","com.rnett.plugin.stdlib.JavaLang.Exception"]},{"name":"object Float : ClassRef, Kotlin.Mathable","description":"com.rnett.plugin.stdlib.Kotlin.Float","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-float/index.html","searchKeys":["Float","object Float : ClassRef, Kotlin.Mathable","com.rnett.plugin.stdlib.Kotlin.Float"]},{"name":"object IllegalArgumentException : ClassRef, ExceptionClassWithCause","description":"com.rnett.plugin.stdlib.JavaLang.IllegalArgumentException","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-illegal-argument-exception/index.html","searchKeys":["IllegalArgumentException","object IllegalArgumentException : ClassRef, ExceptionClassWithCause","com.rnett.plugin.stdlib.JavaLang.IllegalArgumentException"]},{"name":"object IllegalStateException : ClassRef, ExceptionClassWithCause","description":"com.rnett.plugin.stdlib.JavaLang.IllegalStateException","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-illegal-state-exception/index.html","searchKeys":["IllegalStateException","object IllegalStateException : ClassRef, ExceptionClassWithCause","com.rnett.plugin.stdlib.JavaLang.IllegalStateException"]},{"name":"object IndexOutOfBoundsException : ClassRef, ExceptionClass","description":"com.rnett.plugin.stdlib.JavaLang.IndexOutOfBoundsException","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-index-out-of-bounds-exception/index.html","searchKeys":["IndexOutOfBoundsException","object IndexOutOfBoundsException : ClassRef, ExceptionClass","com.rnett.plugin.stdlib.JavaLang.IndexOutOfBoundsException"]},{"name":"object Int : ClassRef, Kotlin.Mathable","description":"com.rnett.plugin.stdlib.Kotlin.Int","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-int/index.html","searchKeys":["Int","object Int : ClassRef, Kotlin.Mathable","com.rnett.plugin.stdlib.Kotlin.Int"]},{"name":"object JavaLang : RootPackage","description":"com.rnett.plugin.stdlib.JavaLang","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/index.html","searchKeys":["JavaLang","object JavaLang : RootPackage","com.rnett.plugin.stdlib.JavaLang"]},{"name":"object JavaUtil : RootPackage","description":"com.rnett.plugin.stdlib.JavaUtil","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-util/index.html","searchKeys":["JavaUtil","object JavaUtil : RootPackage","com.rnett.plugin.stdlib.JavaUtil"]},{"name":"object KClass : ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Reflect.KClass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-reflect/-k-class/index.html","searchKeys":["KClass","object KClass : ClassRef","com.rnett.plugin.stdlib.Kotlin.Reflect.KClass"]},{"name":"object Kotlin : RootPackage","description":"com.rnett.plugin.stdlib.Kotlin","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/index.html","searchKeys":["Kotlin","object Kotlin : RootPackage","com.rnett.plugin.stdlib.Kotlin"]},{"name":"object List : ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.List","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-list/index.html","searchKeys":["List","object List : ClassRef","com.rnett.plugin.stdlib.Kotlin.Collections.List"]},{"name":"object Long : ClassRef, Kotlin.Mathable","description":"com.rnett.plugin.stdlib.Kotlin.Long","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-long/index.html","searchKeys":["Long","object Long : ClassRef, Kotlin.Mathable","com.rnett.plugin.stdlib.Kotlin.Long"]},{"name":"object Map : ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Map","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-map/index.html","searchKeys":["Map","object Map : ClassRef","com.rnett.plugin.stdlib.Kotlin.Collections.Map"]},{"name":"object MutableList : ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-list/index.html","searchKeys":["MutableList","object MutableList : ClassRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableList"]},{"name":"object MutableMap : ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-map/index.html","searchKeys":["MutableMap","object MutableMap : ClassRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap"]},{"name":"object MutableSet : ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-set/index.html","searchKeys":["MutableSet","object MutableSet : ClassRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet"]},{"name":"object NoSuchElementException : ClassRef, ExceptionClass","description":"com.rnett.plugin.stdlib.JavaUtil.NoSuchElementException","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-util/-no-such-element-exception/index.html","searchKeys":["NoSuchElementException","object NoSuchElementException : ClassRef, ExceptionClass","com.rnett.plugin.stdlib.JavaUtil.NoSuchElementException"]},{"name":"object NullPointerException : ClassRef, ExceptionClass","description":"com.rnett.plugin.stdlib.JavaLang.NullPointerException","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-null-pointer-exception/index.html","searchKeys":["NullPointerException","object NullPointerException : ClassRef, ExceptionClass","com.rnett.plugin.stdlib.JavaLang.NullPointerException"]},{"name":"object Number : ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Number","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-number/index.html","searchKeys":["Number","object Number : ClassRef","com.rnett.plugin.stdlib.Kotlin.Number"]},{"name":"object Reflect : PackageRef","description":"com.rnett.plugin.stdlib.Kotlin.Reflect","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-reflect/index.html","searchKeys":["Reflect","object Reflect : PackageRef","com.rnett.plugin.stdlib.Kotlin.Reflect"]},{"name":"object RuntimeException : ClassRef, ExceptionClassWithCause","description":"com.rnett.plugin.stdlib.JavaLang.RuntimeException","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-runtime-exception/index.html","searchKeys":["RuntimeException","object RuntimeException : ClassRef, ExceptionClassWithCause","com.rnett.plugin.stdlib.JavaLang.RuntimeException"]},{"name":"object Set : ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Set","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-set/index.html","searchKeys":["Set","object Set : ClassRef","com.rnett.plugin.stdlib.Kotlin.Collections.Set"]},{"name":"object Short : ClassRef, Kotlin.Mathable","description":"com.rnett.plugin.stdlib.Kotlin.Short","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-short/index.html","searchKeys":["Short","object Short : ClassRef, Kotlin.Mathable","com.rnett.plugin.stdlib.Kotlin.Short"]},{"name":"object StarRef : TypeProjectionRef","description":"com.rnett.plugin.naming.StarRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-star-ref/index.html","searchKeys":["StarRef","object StarRef : TypeProjectionRef","com.rnett.plugin.naming.StarRef"]},{"name":"object String : ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.String","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-string/index.html","searchKeys":["String","object String : ClassRef","com.rnett.plugin.stdlib.Kotlin.String"]},{"name":"object Throwable : ClassRef, ExceptionClassWithCause","description":"com.rnett.plugin.stdlib.Kotlin.Throwable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-throwable/index.html","searchKeys":["Throwable","object Throwable : ClassRef, ExceptionClassWithCause","com.rnett.plugin.stdlib.Kotlin.Throwable"]},{"name":"object UnsupportedOperationException : ClassRef, ExceptionClassWithCause","description":"com.rnett.plugin.stdlib.JavaLang.UnsupportedOperationException","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-unsupported-operation-exception/index.html","searchKeys":["UnsupportedOperationException","object UnsupportedOperationException : ClassRef, ExceptionClassWithCause","com.rnett.plugin.stdlib.JavaLang.UnsupportedOperationException"]},{"name":"open class CollectionBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : IterableBuilders","description":"com.rnett.plugin.stdlib.CollectionBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collection-builders/index.html","searchKeys":["CollectionBuilders","open class CollectionBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : IterableBuilders","com.rnett.plugin.stdlib.CollectionBuilders"]},{"name":"open class ConstructorFilter : IConstructorFilter","description":"com.rnett.plugin.naming.ConstructorFilter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-filter/index.html","searchKeys":["ConstructorFilter","open class ConstructorFilter : IConstructorFilter","com.rnett.plugin.naming.ConstructorFilter"]},{"name":"open class ExceptionBuilders(klass: ExceptionClass, builder: IrBuilderWithScope, context: IrPluginContext) : MethodBuilder","description":"com.rnett.plugin.stdlib.ExceptionBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-builders/index.html","searchKeys":["ExceptionBuilders","open class ExceptionBuilders(klass: ExceptionClass, builder: IrBuilderWithScope, context: IrPluginContext) : MethodBuilder","com.rnett.plugin.stdlib.ExceptionBuilders"]},{"name":"open class FunctionFilter : IFunctionFilter","description":"com.rnett.plugin.naming.FunctionFilter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/index.html","searchKeys":["FunctionFilter","open class FunctionFilter : IFunctionFilter","com.rnett.plugin.naming.FunctionFilter"]},{"name":"open class IterableBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : TypedMethodBuilder","description":"com.rnett.plugin.stdlib.IterableBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-iterable-builders/index.html","searchKeys":["IterableBuilders","open class IterableBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : TypedMethodBuilder","com.rnett.plugin.stdlib.IterableBuilders"]},{"name":"open class ListBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : CollectionBuilders","description":"com.rnett.plugin.stdlib.ListBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-list-builders/index.html","searchKeys":["ListBuilders","open class ListBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : CollectionBuilders","com.rnett.plugin.stdlib.ListBuilders"]},{"name":"open class MapBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : TypedMethodBuilder","description":"com.rnett.plugin.stdlib.MapBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-map-builders/index.html","searchKeys":["MapBuilders","open class MapBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : TypedMethodBuilder","com.rnett.plugin.stdlib.MapBuilders"]},{"name":"open class MutableListBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext) : ListBuilders","description":"com.rnett.plugin.stdlib.MutableListBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-list-builders/index.html","searchKeys":["MutableListBuilders","open class MutableListBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext) : ListBuilders","com.rnett.plugin.stdlib.MutableListBuilders"]},{"name":"open class MutableMapBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext) : MapBuilders","description":"com.rnett.plugin.stdlib.MutableMapBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-map-builders/index.html","searchKeys":["MutableMapBuilders","open class MutableMapBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext) : MapBuilders","com.rnett.plugin.stdlib.MutableMapBuilders"]},{"name":"open class MutableSetBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext) : SetBuilders","description":"com.rnett.plugin.stdlib.MutableSetBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-mutable-set-builders/index.html","searchKeys":["MutableSetBuilders","open class MutableSetBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext) : SetBuilders","com.rnett.plugin.stdlib.MutableSetBuilders"]},{"name":"open class NumberBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : TypedMethodBuilder","description":"com.rnett.plugin.stdlib.NumberBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-number-builders/index.html","searchKeys":["NumberBuilders","open class NumberBuilders(builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : TypedMethodBuilder","com.rnett.plugin.stdlib.NumberBuilders"]},{"name":"open class PropertyFilter : IPropertyFilter","description":"com.rnett.plugin.naming.PropertyFilter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/index.html","searchKeys":["PropertyFilter","open class PropertyFilter : IPropertyFilter","com.rnett.plugin.naming.PropertyFilter"]},{"name":"open class RootPackage(name: String) : Namespace","description":"com.rnett.plugin.naming.RootPackage","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-root-package/index.html","searchKeys":["RootPackage","open class RootPackage(name: String) : Namespace","com.rnett.plugin.naming.RootPackage"]},{"name":"open class SetBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : CollectionBuilders","description":"com.rnett.plugin.stdlib.SetBuilders","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-set-builders/index.html","searchKeys":["SetBuilders","open class SetBuilders(collections: CollectionsBuilders, builder: IrBuilderWithScope, context: IrPluginContext, type: ClassRef) : CollectionBuilders","com.rnett.plugin.stdlib.SetBuilders"]},{"name":"open fun <R : IrBindableSymbol<*, *>> Reference<R>.resolve(): R","description":"com.rnett.plugin.ir.HasContext.resolve","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/resolve.html","searchKeys":["resolve","open fun <R : IrBindableSymbol<*, *>> Reference<R>.resolve(): R","com.rnett.plugin.ir.HasContext.resolve"]},{"name":"open fun <R : IrBindableSymbol<*, *>> Reference<R>.resolveOrNull(): R?","description":"com.rnett.plugin.ir.HasContext.resolveOrNull","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/resolve-or-null.html","searchKeys":["resolveOrNull","open fun <R : IrBindableSymbol<*, *>> Reference<R>.resolveOrNull(): R?","com.rnett.plugin.ir.HasContext.resolveOrNull"]},{"name":"open fun <T : IrElement> IrSymbolOwner.buildStatement(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrStatementOrigin? = null, block: IrSingleStatementBuilder.() -> T): T","description":"com.rnett.plugin.ir.HasContext.buildStatement","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/build-statement.html","searchKeys":["buildStatement","open fun <T : IrElement> IrSymbolOwner.buildStatement(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrStatementOrigin? = null, block: IrSingleStatementBuilder.() -> T): T","com.rnett.plugin.ir.HasContext.buildStatement"]},{"name":"open fun <T> IrSymbolOwner.withBuilder(block: DeclarationIrBuilder.() -> T): T","description":"com.rnett.plugin.ir.HasContext.withBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/with-builder.html","searchKeys":["withBuilder","open fun <T> IrSymbolOwner.withBuilder(block: DeclarationIrBuilder.() -> T): T","com.rnett.plugin.ir.HasContext.withBuilder"]},{"name":"open fun Boolean.asConst(type: IrType = context.irBuiltIns.booleanType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Boolean>","description":"com.rnett.plugin.ir.HasContext.asConst","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/as-const.html","searchKeys":["asConst","open fun Boolean.asConst(type: IrType = context.irBuiltIns.booleanType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Boolean>","com.rnett.plugin.ir.HasContext.asConst"]},{"name":"open fun Byte.asConst(type: IrType = context.irBuiltIns.byteType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Byte>","description":"com.rnett.plugin.ir.HasContext.asConst","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/as-const.html","searchKeys":["asConst","open fun Byte.asConst(type: IrType = context.irBuiltIns.byteType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Byte>","com.rnett.plugin.ir.HasContext.asConst"]},{"name":"open fun Char.asConst(type: IrType = context.irBuiltIns.charType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Char>","description":"com.rnett.plugin.ir.HasContext.asConst","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/as-const.html","searchKeys":["asConst","open fun Char.asConst(type: IrType = context.irBuiltIns.charType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Char>","com.rnett.plugin.ir.HasContext.asConst"]},{"name":"open fun ClassRef.resolveTypeWith(vararg arguments: IrType): IrSimpleType","description":"com.rnett.plugin.ir.HasContext.resolveTypeWith","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/resolve-type-with.html","searchKeys":["resolveTypeWith","open fun ClassRef.resolveTypeWith(vararg arguments: IrType): IrSimpleType","com.rnett.plugin.ir.HasContext.resolveTypeWith"]},{"name":"open fun Double.asConst(type: IrType = context.irBuiltIns.doubleType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Double>","description":"com.rnett.plugin.ir.HasContext.asConst","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/as-const.html","searchKeys":["asConst","open fun Double.asConst(type: IrType = context.irBuiltIns.doubleType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Double>","com.rnett.plugin.ir.HasContext.asConst"]},{"name":"open fun Float.asConst(type: IrType = context.irBuiltIns.floatType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Float>","description":"com.rnett.plugin.ir.HasContext.asConst","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/as-const.html","searchKeys":["asConst","open fun Float.asConst(type: IrType = context.irBuiltIns.floatType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Float>","com.rnett.plugin.ir.HasContext.asConst"]},{"name":"open fun Int.asConst(type: IrType = context.irBuiltIns.intType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Int>","description":"com.rnett.plugin.ir.HasContext.asConst","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/as-const.html","searchKeys":["asConst","open fun Int.asConst(type: IrType = context.irBuiltIns.intType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Int>","com.rnett.plugin.ir.HasContext.asConst"]},{"name":"open fun IrBuilderWithScope.buildLambda(returnType: IrType?, funBuilder: IrFunctionBuilder.() -> Unit = {}, funApply: IrSimpleFunction.() -> Unit): IrSimpleFunction","description":"com.rnett.plugin.ir.HasContext.buildLambda","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/build-lambda.html","searchKeys":["buildLambda","open fun IrBuilderWithScope.buildLambda(returnType: IrType?, funBuilder: IrFunctionBuilder.() -> Unit = {}, funApply: IrSimpleFunction.() -> Unit): IrSimpleFunction","com.rnett.plugin.ir.HasContext.buildLambda"]},{"name":"open fun IrBuilderWithScope.irCall(funcRef: FunctionRef): IrCall","description":"com.rnett.plugin.ir.HasContext.irCall","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/ir-call.html","searchKeys":["irCall","open fun IrBuilderWithScope.irCall(funcRef: FunctionRef): IrCall","com.rnett.plugin.ir.HasContext.irCall"]},{"name":"open fun IrBuilderWithScope.irCall(funcRef: FunctionRef, type: IrType): IrCall","description":"com.rnett.plugin.ir.HasContext.irCall","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/ir-call.html","searchKeys":["irCall","open fun IrBuilderWithScope.irCall(funcRef: FunctionRef, type: IrType): IrCall","com.rnett.plugin.ir.HasContext.irCall"]},{"name":"open fun IrClass.isSubclassOf(klass: ClassRef): Boolean","description":"com.rnett.plugin.ir.HasContext.isSubclassOf","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/is-subclass-of.html","searchKeys":["isSubclassOf","open fun IrClass.isSubclassOf(klass: ClassRef): Boolean","com.rnett.plugin.ir.HasContext.isSubclassOf"]},{"name":"open fun IrElement.messageLocation(): CompilerMessageSourceLocation?","description":"com.rnett.plugin.ir.KnowsCurrentFile.messageLocation","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/message-location.html","searchKeys":["messageLocation","open fun IrElement.messageLocation(): CompilerMessageSourceLocation?","com.rnett.plugin.ir.KnowsCurrentFile.messageLocation"]},{"name":"open fun IrSymbolOwner.createIrBuilderAt(): DeclarationIrBuilder","description":"com.rnett.plugin.ir.HasContext.createIrBuilderAt","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/create-ir-builder-at.html","searchKeys":["createIrBuilderAt","open fun IrSymbolOwner.createIrBuilderAt(): DeclarationIrBuilder","com.rnett.plugin.ir.HasContext.createIrBuilderAt"]},{"name":"open fun IrType.isSubclassOf(klass: ClassRef): Boolean","description":"com.rnett.plugin.ir.HasContext.isSubclassOf","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/is-subclass-of.html","searchKeys":["isSubclassOf","open fun IrType.isSubclassOf(klass: ClassRef): Boolean","com.rnett.plugin.ir.HasContext.isSubclassOf"]},{"name":"open fun KotlinType.toIr(): IrType","description":"com.rnett.plugin.ir.HasContext.toIr","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/to-ir.html","searchKeys":["toIr","open fun KotlinType.toIr(): IrType","com.rnett.plugin.ir.HasContext.toIr"]},{"name":"open fun Long.asConst(type: IrType = context.irBuiltIns.longType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Long>","description":"com.rnett.plugin.ir.HasContext.asConst","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/as-const.html","searchKeys":["asConst","open fun Long.asConst(type: IrType = context.irBuiltIns.longType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Long>","com.rnett.plugin.ir.HasContext.asConst"]},{"name":"open fun MessageCollector.report(message: String, level: CompilerMessageSeverity, location: CompilerMessageSourceLocation?)","description":"com.rnett.plugin.ir.KnowsCurrentFile.report","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/report.html","searchKeys":["report","open fun MessageCollector.report(message: String, level: CompilerMessageSeverity, location: CompilerMessageSourceLocation?)","com.rnett.plugin.ir.KnowsCurrentFile.report"]},{"name":"open fun MessageCollector.reportAt(message: String, level: CompilerMessageSeverity, location: IrElement)","description":"com.rnett.plugin.ir.KnowsCurrentFile.reportAt","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/report-at.html","searchKeys":["reportAt","open fun MessageCollector.reportAt(message: String, level: CompilerMessageSeverity, location: IrElement)","com.rnett.plugin.ir.KnowsCurrentFile.reportAt"]},{"name":"open fun MessageCollector.reportError(message: String, location: CompilerMessageSourceLocation?)","description":"com.rnett.plugin.ir.KnowsCurrentFile.reportError","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/report-error.html","searchKeys":["reportError","open fun MessageCollector.reportError(message: String, location: CompilerMessageSourceLocation?)","com.rnett.plugin.ir.KnowsCurrentFile.reportError"]},{"name":"open fun MessageCollector.reportError(message: String, location: IrElement)","description":"com.rnett.plugin.ir.KnowsCurrentFile.reportError","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/report-error.html","searchKeys":["reportError","open fun MessageCollector.reportError(message: String, location: IrElement)","com.rnett.plugin.ir.KnowsCurrentFile.reportError"]},{"name":"open fun MessageCollector.reportInfo(message: String, location: CompilerMessageSourceLocation?)","description":"com.rnett.plugin.ir.KnowsCurrentFile.reportInfo","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/report-info.html","searchKeys":["reportInfo","open fun MessageCollector.reportInfo(message: String, location: CompilerMessageSourceLocation?)","com.rnett.plugin.ir.KnowsCurrentFile.reportInfo"]},{"name":"open fun MessageCollector.reportInfo(message: String, location: IrElement)","description":"com.rnett.plugin.ir.KnowsCurrentFile.reportInfo","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/report-info.html","searchKeys":["reportInfo","open fun MessageCollector.reportInfo(message: String, location: IrElement)","com.rnett.plugin.ir.KnowsCurrentFile.reportInfo"]},{"name":"open fun MessageCollector.reportWarning(message: String, location: CompilerMessageSourceLocation?)","description":"com.rnett.plugin.ir.KnowsCurrentFile.reportWarning","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/report-warning.html","searchKeys":["reportWarning","open fun MessageCollector.reportWarning(message: String, location: CompilerMessageSourceLocation?)","com.rnett.plugin.ir.KnowsCurrentFile.reportWarning"]},{"name":"open fun MessageCollector.reportWarning(message: String, location: IrElement)","description":"com.rnett.plugin.ir.KnowsCurrentFile.reportWarning","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-knows-current-file/report-warning.html","searchKeys":["reportWarning","open fun MessageCollector.reportWarning(message: String, location: IrElement)","com.rnett.plugin.ir.KnowsCurrentFile.reportWarning"]},{"name":"open fun Short.asConst(type: IrType = context.irBuiltIns.shortType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Short>","description":"com.rnett.plugin.ir.HasContext.asConst","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/as-const.html","searchKeys":["asConst","open fun Short.asConst(type: IrType = context.irBuiltIns.shortType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Short>","com.rnett.plugin.ir.HasContext.asConst"]},{"name":"open fun String.asConst(type: IrType = context.irBuiltIns.stringType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<String>","description":"com.rnett.plugin.ir.HasContext.asConst","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/as-const.html","searchKeys":["asConst","open fun String.asConst(type: IrType = context.irBuiltIns.stringType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<String>","com.rnett.plugin.ir.HasContext.asConst"]},{"name":"open fun TypeRef.resolve(): IrType","description":"com.rnett.plugin.ir.HasContext.resolve","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/resolve.html","searchKeys":["resolve","open fun TypeRef.resolve(): IrType","com.rnett.plugin.ir.HasContext.resolve"]},{"name":"open fun createIrBuilder(symbol: IrSymbol, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): DeclarationIrBuilder","description":"com.rnett.plugin.ir.HasContext.createIrBuilder","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/create-ir-builder.html","searchKeys":["createIrBuilder","open fun createIrBuilder(symbol: IrSymbol, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): DeclarationIrBuilder","com.rnett.plugin.ir.HasContext.createIrBuilder"]},{"name":"open fun div(otherType: IrType): FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Mathable.div","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-mathable/div.html","searchKeys":["div","open fun div(otherType: IrType): FunctionRef","com.rnett.plugin.stdlib.Kotlin.Mathable.div"]},{"name":"open fun getReferencedClass(symbol: IrClassSymbol): IrClassSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedClass","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-class.html","searchKeys":["getReferencedClass","open fun getReferencedClass(symbol: IrClassSymbol): IrClassSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedClass"]},{"name":"open fun getReferencedClassOrNull(symbol: IrClassSymbol?): IrClassSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedClassOrNull","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-class-or-null.html","searchKeys":["getReferencedClassOrNull","open fun getReferencedClassOrNull(symbol: IrClassSymbol?): IrClassSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedClassOrNull"]},{"name":"open fun getReferencedClassifier(symbol: IrClassifierSymbol): IrClassifierSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedClassifier","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-classifier.html","searchKeys":["getReferencedClassifier","open fun getReferencedClassifier(symbol: IrClassifierSymbol): IrClassifierSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedClassifier"]},{"name":"open fun getReferencedConstructor(symbol: IrConstructorSymbol): IrConstructorSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedConstructor","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-constructor.html","searchKeys":["getReferencedConstructor","open fun getReferencedConstructor(symbol: IrConstructorSymbol): IrConstructorSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedConstructor"]},{"name":"open fun getReferencedEnumEntry(symbol: IrEnumEntrySymbol): IrEnumEntrySymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedEnumEntry","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-enum-entry.html","searchKeys":["getReferencedEnumEntry","open fun getReferencedEnumEntry(symbol: IrEnumEntrySymbol): IrEnumEntrySymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedEnumEntry"]},{"name":"open fun getReferencedField(symbol: IrFieldSymbol): IrFieldSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedField","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-field.html","searchKeys":["getReferencedField","open fun getReferencedField(symbol: IrFieldSymbol): IrFieldSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedField"]},{"name":"open fun getReferencedFunction(symbol: IrFunctionSymbol): IrFunctionSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedFunction","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-function.html","searchKeys":["getReferencedFunction","open fun getReferencedFunction(symbol: IrFunctionSymbol): IrFunctionSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedFunction"]},{"name":"open fun getReferencedLocalDelegatedProperty(symbol: IrLocalDelegatedPropertySymbol): IrLocalDelegatedPropertySymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedLocalDelegatedProperty","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-local-delegated-property.html","searchKeys":["getReferencedLocalDelegatedProperty","open fun getReferencedLocalDelegatedProperty(symbol: IrLocalDelegatedPropertySymbol): IrLocalDelegatedPropertySymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedLocalDelegatedProperty"]},{"name":"open fun getReferencedProperty(symbol: IrPropertySymbol): IrPropertySymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedProperty","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-property.html","searchKeys":["getReferencedProperty","open fun getReferencedProperty(symbol: IrPropertySymbol): IrPropertySymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedProperty"]},{"name":"open fun getReferencedReturnableBlock(symbol: IrReturnableBlockSymbol): IrReturnableBlockSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedReturnableBlock","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-returnable-block.html","searchKeys":["getReferencedReturnableBlock","open fun getReferencedReturnableBlock(symbol: IrReturnableBlockSymbol): IrReturnableBlockSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedReturnableBlock"]},{"name":"open fun getReferencedScript(symbol: IrScriptSymbol): IrScriptSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedScript","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-script.html","searchKeys":["getReferencedScript","open fun getReferencedScript(symbol: IrScriptSymbol): IrScriptSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedScript"]},{"name":"open fun getReferencedSimpleFunction(symbol: IrSimpleFunctionSymbol): IrSimpleFunctionSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedSimpleFunction","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-simple-function.html","searchKeys":["getReferencedSimpleFunction","open fun getReferencedSimpleFunction(symbol: IrSimpleFunctionSymbol): IrSimpleFunctionSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedSimpleFunction"]},{"name":"open fun getReferencedTypeAlias(symbol: IrTypeAliasSymbol): IrTypeAliasSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedTypeAlias","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-type-alias.html","searchKeys":["getReferencedTypeAlias","open fun getReferencedTypeAlias(symbol: IrTypeAliasSymbol): IrTypeAliasSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedTypeAlias"]},{"name":"open fun getReferencedValue(symbol: IrValueSymbol): IrValueSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedValue","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-value.html","searchKeys":["getReferencedValue","open fun getReferencedValue(symbol: IrValueSymbol): IrValueSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedValue"]},{"name":"open fun getReferencedVariable(symbol: IrVariableSymbol): IrVariableSymbol?","description":"com.rnett.plugin.ir.ReferenceRemapper.getReferencedVariable","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-remapper/get-referenced-variable.html","searchKeys":["getReferencedVariable","open fun getReferencedVariable(symbol: IrVariableSymbol): IrVariableSymbol?","com.rnett.plugin.ir.ReferenceRemapper.getReferencedVariable"]},{"name":"open fun lambdaArgument(lambda: IrSimpleFunction, type: IrType = run {\n            //TODO workaround for https://youtrack.jetbrains.com/issue/KT-46896\n            val base = if (lambda.isSuspend)\n                context.referenceClass(\n                    StandardNames.getSuspendFunctionClassId(lambda.allParameters.size).asSingleFqName()\n                )\n                    ?: error(\"suspend function type not found\")\n            else\n                context.referenceClass(StandardNames.getFunctionClassId(lambda.allParameters.size).asSingleFqName())\n                    ?: error(\"function type not found\")\n\n            base.typeWith(lambda.allParameters.map { it.type } + lambda.returnType)\n        }, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionExpression","description":"com.rnett.plugin.ir.HasContext.lambdaArgument","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/lambda-argument.html","searchKeys":["lambdaArgument","open fun lambdaArgument(lambda: IrSimpleFunction, type: IrType = run {\n            //TODO workaround for https://youtrack.jetbrains.com/issue/KT-46896\n            val base = if (lambda.isSuspend)\n                context.referenceClass(\n                    StandardNames.getSuspendFunctionClassId(lambda.allParameters.size).asSingleFqName()\n                )\n                    ?: error(\"suspend function type not found\")\n            else\n                context.referenceClass(StandardNames.getFunctionClassId(lambda.allParameters.size).asSingleFqName())\n                    ?: error(\"function type not found\")\n\n            base.typeWith(lambda.allParameters.map { it.type } + lambda.returnType)\n        }, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrFunctionExpression","com.rnett.plugin.ir.HasContext.lambdaArgument"]},{"name":"open fun minus(otherType: IrType): FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Mathable.minus","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-mathable/minus.html","searchKeys":["minus","open fun minus(otherType: IrType): FunctionRef","com.rnett.plugin.stdlib.Kotlin.Mathable.minus"]},{"name":"open fun nullConst(type: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Nothing?>","description":"com.rnett.plugin.ir.HasContext.nullConst","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/null-const.html","searchKeys":["nullConst","open fun nullConst(type: IrType, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrConst<Nothing?>","com.rnett.plugin.ir.HasContext.nullConst"]},{"name":"open fun plus(otherType: IrType): FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Mathable.plus","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-mathable/plus.html","searchKeys":["plus","open fun plus(otherType: IrType): FunctionRef","com.rnett.plugin.stdlib.Kotlin.Mathable.plus"]},{"name":"open fun times(otherType: IrType): FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Mathable.times","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-mathable/times.html","searchKeys":["times","open fun times(otherType: IrType): FunctionRef","com.rnett.plugin.stdlib.Kotlin.Mathable.times"]},{"name":"open operator fun <R : IrBindableSymbol<*, *>> Reference<R>.invoke(): R","description":"com.rnett.plugin.ir.HasContext.invoke","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/invoke.html","searchKeys":["invoke","open operator fun <R : IrBindableSymbol<*, *>> Reference<R>.invoke(): R","com.rnett.plugin.ir.HasContext.invoke"]},{"name":"open operator fun Int.invoke(filter: (IrValueParameter) -> Boolean)","description":"com.rnett.plugin.naming.IConstructorFilter.invoke","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-constructor-filter/invoke.html","searchKeys":["invoke","open operator fun Int.invoke(filter: (IrValueParameter) -> Boolean)","com.rnett.plugin.naming.IConstructorFilter.invoke"]},{"name":"open operator fun Int.invoke(filter: (IrValueParameter) -> Boolean)","description":"com.rnett.plugin.naming.IFunctionFilter.invoke","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-i-function-filter/invoke.html","searchKeys":["invoke","open operator fun Int.invoke(filter: (IrValueParameter) -> Boolean)","com.rnett.plugin.naming.IFunctionFilter.invoke"]},{"name":"open operator fun TypeRef.invoke(): IrType","description":"com.rnett.plugin.ir.HasContext.invoke","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/invoke.html","searchKeys":["invoke","open operator fun TypeRef.invoke(): IrType","com.rnett.plugin.ir.HasContext.invoke"]},{"name":"open operator fun invoke(context: IrPluginContext): S","description":"com.rnett.plugin.naming.Reference.invoke","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-reference/invoke.html","searchKeys":["invoke","open operator fun invoke(context: IrPluginContext): S","com.rnett.plugin.naming.Reference.invoke"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): FunctionRef","description":"com.rnett.plugin.naming.FunctionRefDelegate.getValue","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-ref-delegate/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): FunctionRef","com.rnett.plugin.naming.FunctionRefDelegate.getValue"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): PropertyRef","description":"com.rnett.plugin.naming.PropertyRefDelegate.getValue","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-ref-delegate/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): PropertyRef","com.rnett.plugin.naming.PropertyRefDelegate.getValue"]},{"name":"open override fun filter(filter: (IrConstructor) -> Boolean)","description":"com.rnett.plugin.naming.ConstructorFilter.filter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-filter/filter.html","searchKeys":["filter","open override fun filter(filter: (IrConstructor) -> Boolean)","com.rnett.plugin.naming.ConstructorFilter.filter"]},{"name":"open override fun filter(filter: (IrFunction) -> Boolean)","description":"com.rnett.plugin.naming.FunctionFilter.filter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/filter.html","searchKeys":["filter","open override fun filter(filter: (IrFunction) -> Boolean)","com.rnett.plugin.naming.FunctionFilter.filter"]},{"name":"open override fun filter(filter: (IrProperty) -> Boolean)","description":"com.rnett.plugin.naming.PropertyFilter.filter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/filter.html","searchKeys":["filter","open override fun filter(filter: (IrProperty) -> Boolean)","com.rnett.plugin.naming.PropertyFilter.filter"]},{"name":"open override fun getReferencedClass(symbol: IrClassSymbol): IrClassSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedClass","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-class.html","searchKeys":["getReferencedClass","open override fun getReferencedClass(symbol: IrClassSymbol): IrClassSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedClass"]},{"name":"open override fun getReferencedClassOrNull(symbol: IrClassSymbol?): IrClassSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedClassOrNull","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-class-or-null.html","searchKeys":["getReferencedClassOrNull","open override fun getReferencedClassOrNull(symbol: IrClassSymbol?): IrClassSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedClassOrNull"]},{"name":"open override fun getReferencedClassifier(symbol: IrClassifierSymbol): IrClassifierSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedClassifier","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-classifier.html","searchKeys":["getReferencedClassifier","open override fun getReferencedClassifier(symbol: IrClassifierSymbol): IrClassifierSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedClassifier"]},{"name":"open override fun getReferencedConstructor(symbol: IrConstructorSymbol): IrConstructorSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedConstructor","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-constructor.html","searchKeys":["getReferencedConstructor","open override fun getReferencedConstructor(symbol: IrConstructorSymbol): IrConstructorSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedConstructor"]},{"name":"open override fun getReferencedEnumEntry(symbol: IrEnumEntrySymbol): IrEnumEntrySymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedEnumEntry","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-enum-entry.html","searchKeys":["getReferencedEnumEntry","open override fun getReferencedEnumEntry(symbol: IrEnumEntrySymbol): IrEnumEntrySymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedEnumEntry"]},{"name":"open override fun getReferencedField(symbol: IrFieldSymbol): IrFieldSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedField","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-field.html","searchKeys":["getReferencedField","open override fun getReferencedField(symbol: IrFieldSymbol): IrFieldSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedField"]},{"name":"open override fun getReferencedFunction(symbol: IrFunctionSymbol): IrFunctionSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedFunction","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-function.html","searchKeys":["getReferencedFunction","open override fun getReferencedFunction(symbol: IrFunctionSymbol): IrFunctionSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedFunction"]},{"name":"open override fun getReferencedLocalDelegatedProperty(symbol: IrLocalDelegatedPropertySymbol): IrLocalDelegatedPropertySymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedLocalDelegatedProperty","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-local-delegated-property.html","searchKeys":["getReferencedLocalDelegatedProperty","open override fun getReferencedLocalDelegatedProperty(symbol: IrLocalDelegatedPropertySymbol): IrLocalDelegatedPropertySymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedLocalDelegatedProperty"]},{"name":"open override fun getReferencedProperty(symbol: IrPropertySymbol): IrPropertySymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedProperty","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-property.html","searchKeys":["getReferencedProperty","open override fun getReferencedProperty(symbol: IrPropertySymbol): IrPropertySymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedProperty"]},{"name":"open override fun getReferencedReturnableBlock(symbol: IrReturnableBlockSymbol): IrReturnableBlockSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedReturnableBlock","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-returnable-block.html","searchKeys":["getReferencedReturnableBlock","open override fun getReferencedReturnableBlock(symbol: IrReturnableBlockSymbol): IrReturnableBlockSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedReturnableBlock"]},{"name":"open override fun getReferencedScript(symbol: IrScriptSymbol): IrScriptSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedScript","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-script.html","searchKeys":["getReferencedScript","open override fun getReferencedScript(symbol: IrScriptSymbol): IrScriptSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedScript"]},{"name":"open override fun getReferencedSimpleFunction(symbol: IrSimpleFunctionSymbol): IrSimpleFunctionSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedSimpleFunction","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-simple-function.html","searchKeys":["getReferencedSimpleFunction","open override fun getReferencedSimpleFunction(symbol: IrSimpleFunctionSymbol): IrSimpleFunctionSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedSimpleFunction"]},{"name":"open override fun getReferencedTypeAlias(symbol: IrTypeAliasSymbol): IrTypeAliasSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedTypeAlias","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-type-alias.html","searchKeys":["getReferencedTypeAlias","open override fun getReferencedTypeAlias(symbol: IrTypeAliasSymbol): IrTypeAliasSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedTypeAlias"]},{"name":"open override fun getReferencedValue(symbol: IrValueSymbol): IrValueSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedValue","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-value.html","searchKeys":["getReferencedValue","open override fun getReferencedValue(symbol: IrValueSymbol): IrValueSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedValue"]},{"name":"open override fun getReferencedVariable(symbol: IrVariableSymbol): IrVariableSymbol?","description":"com.rnett.plugin.ir.ReferenceReplacements.getReferencedVariable","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get-referenced-variable.html","searchKeys":["getReferencedVariable","open override fun getReferencedVariable(symbol: IrVariableSymbol): IrVariableSymbol?","com.rnett.plugin.ir.ReferenceReplacements.getReferencedVariable"]},{"name":"open override fun lower(irFile: IrFile)","description":"com.rnett.plugin.ir.IrTransformer.lower","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-transformer/lower.html","searchKeys":["lower","open override fun lower(irFile: IrFile)","com.rnett.plugin.ir.IrTransformer.lower"]},{"name":"open override fun matches(function: IrConstructor): Boolean","description":"com.rnett.plugin.naming.ConstructorFilter.matches","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-filter/matches.html","searchKeys":["matches","open override fun matches(function: IrConstructor): Boolean","com.rnett.plugin.naming.ConstructorFilter.matches"]},{"name":"open override fun matches(function: IrFunction): Boolean","description":"com.rnett.plugin.naming.FunctionFilter.matches","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/matches.html","searchKeys":["matches","open override fun matches(function: IrFunction): Boolean","com.rnett.plugin.naming.FunctionFilter.matches"]},{"name":"open override fun matches(property: IrProperty): Boolean","description":"com.rnett.plugin.naming.PropertyFilter.matches","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/matches.html","searchKeys":["matches","open override fun matches(property: IrProperty): Boolean","com.rnett.plugin.naming.PropertyFilter.matches"]},{"name":"open override fun resolve(context: IrPluginContext): IrClassSymbol","description":"com.rnett.plugin.naming.ClassRef.resolve","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class-ref/resolve.html","searchKeys":["resolve","open override fun resolve(context: IrPluginContext): IrClassSymbol","com.rnett.plugin.naming.ClassRef.resolve"]},{"name":"open override fun resolve(context: IrPluginContext): IrConstructorSymbol","description":"com.rnett.plugin.naming.ConstructorRef.resolve","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-ref/resolve.html","searchKeys":["resolve","open override fun resolve(context: IrPluginContext): IrConstructorSymbol","com.rnett.plugin.naming.ConstructorRef.resolve"]},{"name":"open override fun resolve(context: IrPluginContext): IrPropertySymbol","description":"com.rnett.plugin.naming.PropertyRef.resolve","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-ref/resolve.html","searchKeys":["resolve","open override fun resolve(context: IrPluginContext): IrPropertySymbol","com.rnett.plugin.naming.PropertyRef.resolve"]},{"name":"open override fun resolve(context: IrPluginContext): IrSimpleFunctionSymbol","description":"com.rnett.plugin.naming.FunctionRef.resolve","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-ref/resolve.html","searchKeys":["resolve","open override fun resolve(context: IrPluginContext): IrSimpleFunctionSymbol","com.rnett.plugin.naming.FunctionRef.resolve"]},{"name":"open override fun resolveOrNull(context: IrPluginContext): IrClassSymbol?","description":"com.rnett.plugin.naming.ClassRef.resolveOrNull","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-class-ref/resolve-or-null.html","searchKeys":["resolveOrNull","open override fun resolveOrNull(context: IrPluginContext): IrClassSymbol?","com.rnett.plugin.naming.ClassRef.resolveOrNull"]},{"name":"open override fun resolveOrNull(context: IrPluginContext): IrConstructorSymbol?","description":"com.rnett.plugin.naming.ConstructorRef.resolveOrNull","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-ref/resolve-or-null.html","searchKeys":["resolveOrNull","open override fun resolveOrNull(context: IrPluginContext): IrConstructorSymbol?","com.rnett.plugin.naming.ConstructorRef.resolveOrNull"]},{"name":"open override fun resolveOrNull(context: IrPluginContext): IrPropertySymbol?","description":"com.rnett.plugin.naming.PropertyRef.resolveOrNull","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-ref/resolve-or-null.html","searchKeys":["resolveOrNull","open override fun resolveOrNull(context: IrPluginContext): IrPropertySymbol?","com.rnett.plugin.naming.PropertyRef.resolveOrNull"]},{"name":"open override fun resolveOrNull(context: IrPluginContext): IrSimpleFunctionSymbol?","description":"com.rnett.plugin.naming.FunctionRef.resolveOrNull","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-ref/resolve-or-null.html","searchKeys":["resolveOrNull","open override fun resolveOrNull(context: IrPluginContext): IrSimpleFunctionSymbol?","com.rnett.plugin.naming.FunctionRef.resolveOrNull"]},{"name":"open override fun toIrString(): String","description":"com.rnett.plugin.naming.StarRef.toIrString","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-star-ref/to-ir-string.html","searchKeys":["toIrString","open override fun toIrString(): String","com.rnett.plugin.naming.StarRef.toIrString"]},{"name":"open override fun toIrString(): String","description":"com.rnett.plugin.naming.TypeRef.toIrString","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/to-ir-string.html","searchKeys":["toIrString","open override fun toIrString(): String","com.rnett.plugin.naming.TypeRef.toIrString"]},{"name":"open override fun toIrTypeArg(context: IrPluginContext): IrTypeArgument","description":"com.rnett.plugin.naming.StarRef.toIrTypeArg","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-star-ref/to-ir-type-arg.html","searchKeys":["toIrTypeArg","open override fun toIrTypeArg(context: IrPluginContext): IrTypeArgument","com.rnett.plugin.naming.StarRef.toIrTypeArg"]},{"name":"open override fun toIrTypeArg(context: IrPluginContext): IrTypeArgument","description":"com.rnett.plugin.naming.TypeRef.toIrTypeArg","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/to-ir-type-arg.html","searchKeys":["toIrTypeArg","open override fun toIrTypeArg(context: IrPluginContext): IrTypeArgument","com.rnett.plugin.naming.TypeRef.toIrTypeArg"]},{"name":"open override fun toString(): String","description":"com.rnett.plugin.naming.BaseReference.toString","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-base-reference/to-string.html","searchKeys":["toString","open override fun toString(): String","com.rnett.plugin.naming.BaseReference.toString"]},{"name":"open override fun toString(): String","description":"com.rnett.plugin.naming.StarRef.toString","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-star-ref/to-string.html","searchKeys":["toString","open override fun toString(): String","com.rnett.plugin.naming.StarRef.toString"]},{"name":"open override fun toString(): String","description":"com.rnett.plugin.naming.TypeRef.toString","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/to-string.html","searchKeys":["toString","open override fun toString(): String","com.rnett.plugin.naming.TypeRef.toString"]},{"name":"open override fun visitPackageFragment(declaration: IrPackageFragment): IrPackageFragment","description":"com.rnett.plugin.ir.IrTransformer.visitPackageFragment","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-transformer/visit-package-fragment.html","searchKeys":["visitPackageFragment","open override fun visitPackageFragment(declaration: IrPackageFragment): IrPackageFragment","com.rnett.plugin.ir.IrTransformer.visitPackageFragment"]},{"name":"open override val context: IrPluginContext","description":"com.rnett.plugin.ir.IrTransformer.context","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-transformer/context.html","searchKeys":["context","open override val context: IrPluginContext","com.rnett.plugin.ir.IrTransformer.context"]},{"name":"open override val context: IrPluginContext","description":"com.rnett.plugin.stdlib.MethodBuilder.context","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-method-builder/context.html","searchKeys":["context","open override val context: IrPluginContext","com.rnett.plugin.stdlib.MethodBuilder.context"]},{"name":"open override val file: IrFile","description":"com.rnett.plugin.ir.IrTransformer.file","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-transformer/file.html","searchKeys":["file","open override val file: IrFile","com.rnett.plugin.ir.IrTransformer.file"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaLang.AssertionError.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-assertion-error/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaLang.AssertionError.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaLang.ClassCastException.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-class-cast-exception/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaLang.ClassCastException.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaLang.Error.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-error/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaLang.Error.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaLang.Exception.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-exception/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaLang.Exception.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaLang.IllegalArgumentException.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-illegal-argument-exception/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaLang.IllegalArgumentException.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaLang.IllegalStateException.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-illegal-state-exception/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaLang.IllegalStateException.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaLang.IndexOutOfBoundsException.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-index-out-of-bounds-exception/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaLang.IndexOutOfBoundsException.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaLang.NullPointerException.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-null-pointer-exception/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaLang.NullPointerException.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaLang.RuntimeException.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-runtime-exception/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaLang.RuntimeException.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaLang.UnsupportedOperationException.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-unsupported-operation-exception/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaLang.UnsupportedOperationException.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.JavaUtil.NoSuchElementException.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-util/-no-such-element-exception/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.JavaUtil.NoSuchElementException.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Byte.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-byte/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.Kotlin.Byte.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Double.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-double/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.Kotlin.Double.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Float.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-float/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.Kotlin.Float.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Int.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-int/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.Kotlin.Int.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Long.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-long/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.Kotlin.Long.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Short.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-short/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.Kotlin.Short.klass"]},{"name":"open override val klass: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Throwable.klass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-throwable/klass.html","searchKeys":["klass","open override val klass: ClassRef","com.rnett.plugin.stdlib.Kotlin.Throwable.klass"]},{"name":"open override val newWithClause: ConstructorRef","description":"com.rnett.plugin.stdlib.JavaLang.AssertionError.newWithClause","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-assertion-error/new-with-clause.html","searchKeys":["newWithClause","open override val newWithClause: ConstructorRef","com.rnett.plugin.stdlib.JavaLang.AssertionError.newWithClause"]},{"name":"open override val newWithMessage: ConstructorRef","description":"com.rnett.plugin.stdlib.JavaLang.AssertionError.newWithMessage","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-java-lang/-assertion-error/new-with-message.html","searchKeys":["newWithMessage","open override val newWithMessage: ConstructorRef","com.rnett.plugin.stdlib.JavaLang.AssertionError.newWithMessage"]},{"name":"open override var extensionReceiver: (IrValueParameter) -> Boolean? = null","description":"com.rnett.plugin.naming.FunctionFilter.extensionReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/extension-receiver.html","searchKeys":["extensionReceiver","open override var extensionReceiver: (IrValueParameter) -> Boolean? = null","com.rnett.plugin.naming.FunctionFilter.extensionReceiver"]},{"name":"open override var extensionReceiver: (IrValueParameter) -> Boolean? = null","description":"com.rnett.plugin.naming.PropertyFilter.extensionReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/extension-receiver.html","searchKeys":["extensionReceiver","open override var extensionReceiver: (IrValueParameter) -> Boolean? = null","com.rnett.plugin.naming.PropertyFilter.extensionReceiver"]},{"name":"open override var fieldType: String? = null","description":"com.rnett.plugin.naming.PropertyFilter.fieldType","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/field-type.html","searchKeys":["fieldType","open override var fieldType: String? = null","com.rnett.plugin.naming.PropertyFilter.fieldType"]},{"name":"open override var getterType: String? = null","description":"com.rnett.plugin.naming.PropertyFilter.getterType","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/getter-type.html","searchKeys":["getterType","open override var getterType: String? = null","com.rnett.plugin.naming.PropertyFilter.getterType"]},{"name":"open override var hasBackingField: Boolean? = null","description":"com.rnett.plugin.naming.PropertyFilter.hasBackingField","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/has-backing-field.html","searchKeys":["hasBackingField","open override var hasBackingField: Boolean? = null","com.rnett.plugin.naming.PropertyFilter.hasBackingField"]},{"name":"open override var hasDispatchReceiver: Boolean? = null","description":"com.rnett.plugin.naming.FunctionFilter.hasDispatchReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/has-dispatch-receiver.html","searchKeys":["hasDispatchReceiver","open override var hasDispatchReceiver: Boolean? = null","com.rnett.plugin.naming.FunctionFilter.hasDispatchReceiver"]},{"name":"open override var hasExtensionReceiver: Boolean? = null","description":"com.rnett.plugin.naming.FunctionFilter.hasExtensionReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/has-extension-receiver.html","searchKeys":["hasExtensionReceiver","open override var hasExtensionReceiver: Boolean? = null","com.rnett.plugin.naming.FunctionFilter.hasExtensionReceiver"]},{"name":"open override var hasExtensionReceiver: Boolean? = null","description":"com.rnett.plugin.naming.PropertyFilter.hasExtensionReceiver","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/has-extension-receiver.html","searchKeys":["hasExtensionReceiver","open override var hasExtensionReceiver: Boolean? = null","com.rnett.plugin.naming.PropertyFilter.hasExtensionReceiver"]},{"name":"open override var hasGetter: Boolean? = null","description":"com.rnett.plugin.naming.PropertyFilter.hasGetter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/has-getter.html","searchKeys":["hasGetter","open override var hasGetter: Boolean? = null","com.rnett.plugin.naming.PropertyFilter.hasGetter"]},{"name":"open override var hasSetter: Boolean? = null","description":"com.rnett.plugin.naming.PropertyFilter.hasSetter","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/has-setter.html","searchKeys":["hasSetter","open override var hasSetter: Boolean? = null","com.rnett.plugin.naming.PropertyFilter.hasSetter"]},{"name":"open override var hasVararg: Boolean? = null","description":"com.rnett.plugin.naming.ConstructorFilter.hasVararg","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-filter/has-vararg.html","searchKeys":["hasVararg","open override var hasVararg: Boolean? = null","com.rnett.plugin.naming.ConstructorFilter.hasVararg"]},{"name":"open override var hasVararg: Boolean? = null","description":"com.rnett.plugin.naming.FunctionFilter.hasVararg","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/has-vararg.html","searchKeys":["hasVararg","open override var hasVararg: Boolean? = null","com.rnett.plugin.naming.FunctionFilter.hasVararg"]},{"name":"open override var isDelegated: Boolean? = null","description":"com.rnett.plugin.naming.PropertyFilter.isDelegated","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/is-delegated.html","searchKeys":["isDelegated","open override var isDelegated: Boolean? = null","com.rnett.plugin.naming.PropertyFilter.isDelegated"]},{"name":"open override var isExpect: Boolean? = null","description":"com.rnett.plugin.naming.ConstructorFilter.isExpect","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-filter/is-expect.html","searchKeys":["isExpect","open override var isExpect: Boolean? = null","com.rnett.plugin.naming.ConstructorFilter.isExpect"]},{"name":"open override var isExpect: Boolean? = null","description":"com.rnett.plugin.naming.FunctionFilter.isExpect","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/is-expect.html","searchKeys":["isExpect","open override var isExpect: Boolean? = null","com.rnett.plugin.naming.FunctionFilter.isExpect"]},{"name":"open override var isExpect: Boolean? = null","description":"com.rnett.plugin.naming.PropertyFilter.isExpect","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/is-expect.html","searchKeys":["isExpect","open override var isExpect: Boolean? = null","com.rnett.plugin.naming.PropertyFilter.isExpect"]},{"name":"open override var isPrimary: Boolean? = null","description":"com.rnett.plugin.naming.ConstructorFilter.isPrimary","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-filter/is-primary.html","searchKeys":["isPrimary","open override var isPrimary: Boolean? = null","com.rnett.plugin.naming.ConstructorFilter.isPrimary"]},{"name":"open override var numParameters: Int? = null","description":"com.rnett.plugin.naming.ConstructorFilter.numParameters","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-filter/num-parameters.html","searchKeys":["numParameters","open override var numParameters: Int? = null","com.rnett.plugin.naming.ConstructorFilter.numParameters"]},{"name":"open override var numParameters: Int? = null","description":"com.rnett.plugin.naming.FunctionFilter.numParameters","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/num-parameters.html","searchKeys":["numParameters","open override var numParameters: Int? = null","com.rnett.plugin.naming.FunctionFilter.numParameters"]},{"name":"open override var numTypeParameters: Int? = null","description":"com.rnett.plugin.naming.FunctionFilter.numTypeParameters","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/num-type-parameters.html","searchKeys":["numTypeParameters","open override var numTypeParameters: Int? = null","com.rnett.plugin.naming.FunctionFilter.numTypeParameters"]},{"name":"open override var parameters: MutableMap<Int, (IrValueParameter) -> Boolean>","description":"com.rnett.plugin.naming.ConstructorFilter.parameters","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-constructor-filter/parameters.html","searchKeys":["parameters","open override var parameters: MutableMap<Int, (IrValueParameter) -> Boolean>","com.rnett.plugin.naming.ConstructorFilter.parameters"]},{"name":"open override var parameters: MutableMap<Int, (IrValueParameter) -> Boolean>","description":"com.rnett.plugin.naming.FunctionFilter.parameters","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-function-filter/parameters.html","searchKeys":["parameters","open override var parameters: MutableMap<Int, (IrValueParameter) -> Boolean>","com.rnett.plugin.naming.FunctionFilter.parameters"]},{"name":"open override var type: String? = null","description":"com.rnett.plugin.naming.PropertyFilter.type","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-property-filter/type.html","searchKeys":["type","open override var type: String? = null","com.rnett.plugin.naming.PropertyFilter.type"]},{"name":"open val IrBuilderWithScope.kotlin: StdlibBuilders","description":"com.rnett.plugin.ir.HasContext.kotlin","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/kotlin.html","searchKeys":["kotlin","open val IrBuilderWithScope.kotlin: StdlibBuilders","com.rnett.plugin.ir.HasContext.kotlin"]},{"name":"open val IrBuilderWithScope.stdlib: StdlibBuilders","description":"com.rnett.plugin.ir.HasContext.stdlib","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/stdlib.html","searchKeys":["stdlib","open val IrBuilderWithScope.stdlib: StdlibBuilders","com.rnett.plugin.ir.HasContext.stdlib"]},{"name":"open val cause: PropertyRef","description":"com.rnett.plugin.stdlib.ExceptionClass.cause","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-class/cause.html","searchKeys":["cause","open val cause: PropertyRef","com.rnett.plugin.stdlib.ExceptionClass.cause"]},{"name":"open val factory: IrFactory","description":"com.rnett.plugin.ir.HasContext.factory","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-has-context/factory.html","searchKeys":["factory","open val factory: IrFactory","com.rnett.plugin.ir.HasContext.factory"]},{"name":"open val message: PropertyRef","description":"com.rnett.plugin.stdlib.ExceptionClass.message","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-class/message.html","searchKeys":["message","open val message: PropertyRef","com.rnett.plugin.stdlib.ExceptionClass.message"]},{"name":"open val newEmpty: ConstructorRef","description":"com.rnett.plugin.stdlib.ExceptionClass.newEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-class/new-empty.html","searchKeys":["newEmpty","open val newEmpty: ConstructorRef","com.rnett.plugin.stdlib.ExceptionClass.newEmpty"]},{"name":"open val newWithClause: ConstructorRef","description":"com.rnett.plugin.stdlib.ExceptionClassWithCause.newWithClause","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-class-with-cause/new-with-clause.html","searchKeys":["newWithClause","open val newWithClause: ConstructorRef","com.rnett.plugin.stdlib.ExceptionClassWithCause.newWithClause"]},{"name":"open val newWithMessage: ConstructorRef","description":"com.rnett.plugin.stdlib.ExceptionClass.newWithMessage","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-class/new-with-message.html","searchKeys":["newWithMessage","open val newWithMessage: ConstructorRef","com.rnett.plugin.stdlib.ExceptionClass.newWithMessage"]},{"name":"open val newWithMessageAndClause: ConstructorRef","description":"com.rnett.plugin.stdlib.ExceptionClassWithCause.newWithMessageAndClause","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-exception-class-with-cause/new-with-message-and-clause.html","searchKeys":["newWithMessageAndClause","open val newWithMessageAndClause: ConstructorRef","com.rnett.plugin.stdlib.ExceptionClassWithCause.newWithMessageAndClause"]},{"name":"operator fun <T : IrSymbol> get(symbol: T): T?","description":"com.rnett.plugin.ir.ReferenceReplacements.get","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/get.html","searchKeys":["get","operator fun <T : IrSymbol> get(symbol: T): T?","com.rnett.plugin.ir.ReferenceReplacements.get"]},{"name":"operator fun <T : IrSymbol> set(key: T, replacement: T)","description":"com.rnett.plugin.ir.ReferenceReplacements.Builder.set","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/-builder/set.html","searchKeys":["set","operator fun <T : IrSymbol> set(key: T, replacement: T)","com.rnett.plugin.ir.ReferenceReplacements.Builder.set"]},{"name":"operator fun contains(symbol: IrSymbol): Boolean","description":"com.rnett.plugin.ir.ReferenceReplacements.contains","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-reference-replacements/contains.html","searchKeys":["contains","operator fun contains(symbol: IrSymbol): Boolean","com.rnett.plugin.ir.ReferenceReplacements.contains"]},{"name":"sealed class BaseReference","description":"com.rnett.plugin.naming.BaseReference","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-base-reference/index.html","searchKeys":["BaseReference","sealed class BaseReference","com.rnett.plugin.naming.BaseReference"]},{"name":"sealed class Namespace : BaseReference","description":"com.rnett.plugin.naming.Namespace","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-namespace/index.html","searchKeys":["Namespace","sealed class Namespace : BaseReference","com.rnett.plugin.naming.Namespace"]},{"name":"sealed class TypeProjectionRef","description":"com.rnett.plugin.naming.TypeProjectionRef","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-projection-ref/index.html","searchKeys":["TypeProjectionRef","sealed class TypeProjectionRef","com.rnett.plugin.naming.TypeProjectionRef"]},{"name":"val Annotation: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Annotation","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-annotation.html","searchKeys":["Annotation","val Annotation: ClassRef","com.rnett.plugin.stdlib.Kotlin.Annotation"]},{"name":"val Any: AnyBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.Any","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-any.html","searchKeys":["Any","val Any: AnyBuilders","com.rnett.plugin.stdlib.StdlibBuilders.Any"]},{"name":"val Array: ArrayBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.Array","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-array.html","searchKeys":["Array","val Array: ArrayBuilders","com.rnett.plugin.stdlib.StdlibBuilders.Array"]},{"name":"val Array: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Array","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-array.html","searchKeys":["Array","val Array: ClassRef","com.rnett.plugin.stdlib.Kotlin.Array"]},{"name":"val Byte: MathableBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.Byte","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-byte.html","searchKeys":["Byte","val Byte: MathableBuilders","com.rnett.plugin.stdlib.StdlibBuilders.Byte"]},{"name":"val Collection: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Collection","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-collection.html","searchKeys":["Collection","val Collection: ClassRef","com.rnett.plugin.stdlib.Kotlin.Collections.Collection"]},{"name":"val Collection: CollectionBuilders","description":"com.rnett.plugin.stdlib.CollectionsBuilders.Collection","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/-collection.html","searchKeys":["Collection","val Collection: CollectionBuilders","com.rnett.plugin.stdlib.CollectionsBuilders.Collection"]},{"name":"val CompilerConfiguration.messageCollector: MessageCollector","description":"com.rnett.plugin.ir.messageCollector","location":"-compiler -plugin -utils/com.rnett.plugin.ir/message-collector.html","searchKeys":["messageCollector","val CompilerConfiguration.messageCollector: MessageCollector","com.rnett.plugin.ir.messageCollector"]},{"name":"val Double: MathableBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.Double","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-double.html","searchKeys":["Double","val Double: MathableBuilders","com.rnett.plugin.stdlib.StdlibBuilders.Double"]},{"name":"val Float: MathableBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.Float","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-float.html","searchKeys":["Float","val Float: MathableBuilders","com.rnett.plugin.stdlib.StdlibBuilders.Float"]},{"name":"val Int: MathableBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.Int","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-int.html","searchKeys":["Int","val Int: MathableBuilders","com.rnett.plugin.stdlib.StdlibBuilders.Int"]},{"name":"val Iterable: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Iterable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-iterable.html","searchKeys":["Iterable","val Iterable: ClassRef","com.rnett.plugin.stdlib.Kotlin.Collections.Iterable"]},{"name":"val Iterable: IterableBuilders","description":"com.rnett.plugin.stdlib.CollectionsBuilders.Iterable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/-iterable.html","searchKeys":["Iterable","val Iterable: IterableBuilders","com.rnett.plugin.stdlib.CollectionsBuilders.Iterable"]},{"name":"val KClass: StdlibBuilders.ReflectBuilders.KClassBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.KClass","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-reflect-builders/-k-class.html","searchKeys":["KClass","val KClass: StdlibBuilders.ReflectBuilders.KClassBuilders","com.rnett.plugin.stdlib.StdlibBuilders.ReflectBuilders.KClass"]},{"name":"val KType: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Reflect.KType","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-reflect/-k-type.html","searchKeys":["KType","val KType: ClassRef","com.rnett.plugin.stdlib.Kotlin.Reflect.KType"]},{"name":"val List: Kotlin.Collections.List","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.List","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-list/-list.html","searchKeys":["List","val List: Kotlin.Collections.List","com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.List"]},{"name":"val List: ListBuilders","description":"com.rnett.plugin.stdlib.CollectionsBuilders.List","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/-list.html","searchKeys":["List","val List: ListBuilders","com.rnett.plugin.stdlib.CollectionsBuilders.List"]},{"name":"val Long: MathableBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.Long","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-long.html","searchKeys":["Long","val Long: MathableBuilders","com.rnett.plugin.stdlib.StdlibBuilders.Long"]},{"name":"val Map: Kotlin.Collections.Map","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.Map","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-map/-map.html","searchKeys":["Map","val Map: Kotlin.Collections.Map","com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.Map"]},{"name":"val Map: MapBuilders","description":"com.rnett.plugin.stdlib.CollectionsBuilders.Map","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/-map.html","searchKeys":["Map","val Map: MapBuilders","com.rnett.plugin.stdlib.CollectionsBuilders.Map"]},{"name":"val MutableList: MutableListBuilders","description":"com.rnett.plugin.stdlib.CollectionsBuilders.MutableList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/-mutable-list.html","searchKeys":["MutableList","val MutableList: MutableListBuilders","com.rnett.plugin.stdlib.CollectionsBuilders.MutableList"]},{"name":"val MutableMap: MutableMapBuilders","description":"com.rnett.plugin.stdlib.CollectionsBuilders.MutableMap","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/-mutable-map.html","searchKeys":["MutableMap","val MutableMap: MutableMapBuilders","com.rnett.plugin.stdlib.CollectionsBuilders.MutableMap"]},{"name":"val MutableSet: MutableSetBuilders","description":"com.rnett.plugin.stdlib.CollectionsBuilders.MutableSet","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/-mutable-set.html","searchKeys":["MutableSet","val MutableSet: MutableSetBuilders","com.rnett.plugin.stdlib.CollectionsBuilders.MutableSet"]},{"name":"val Number: NumberBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.Number","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-number.html","searchKeys":["Number","val Number: NumberBuilders","com.rnett.plugin.stdlib.StdlibBuilders.Number"]},{"name":"val Pair: ClassRef","description":"com.rnett.plugin.stdlib.Kotlin.Pair","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-pair.html","searchKeys":["Pair","val Pair: ClassRef","com.rnett.plugin.stdlib.Kotlin.Pair"]},{"name":"val Set: Kotlin.Collections.Set","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.Set","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-set/-set.html","searchKeys":["Set","val Set: Kotlin.Collections.Set","com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.Set"]},{"name":"val Set: SetBuilders","description":"com.rnett.plugin.stdlib.CollectionsBuilders.Set","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-collections-builders/-set.html","searchKeys":["Set","val Set: SetBuilders","com.rnett.plugin.stdlib.CollectionsBuilders.Set"]},{"name":"val Short: MathableBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.Short","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-short.html","searchKeys":["Short","val Short: MathableBuilders","com.rnett.plugin.stdlib.StdlibBuilders.Short"]},{"name":"val Throwable: ExceptionBuildersWithCause","description":"com.rnett.plugin.stdlib.StdlibBuilders.Throwable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/-throwable.html","searchKeys":["Throwable","val Throwable: ExceptionBuildersWithCause","com.rnett.plugin.stdlib.StdlibBuilders.Throwable"]},{"name":"val add: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.add","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-list/add.html","searchKeys":["add","val add: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.add"]},{"name":"val add: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.add","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-set/add.html","searchKeys":["add","val add: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.add"]},{"name":"val addAll: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.addAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-list/add-all.html","searchKeys":["addAll","val addAll: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.addAll"]},{"name":"val addAll: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.addAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-set/add-all.html","searchKeys":["addAll","val addAll: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.addAll"]},{"name":"val also: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.also","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/also.html","searchKeys":["also","val also: FunctionRef","com.rnett.plugin.stdlib.Kotlin.also"]},{"name":"val apply: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.apply","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/apply.html","searchKeys":["apply","val apply: FunctionRef","com.rnett.plugin.stdlib.Kotlin.apply"]},{"name":"val arguments: List<TypeProjectionRef>","description":"com.rnett.plugin.naming.TypeRef.arguments","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/arguments.html","searchKeys":["arguments","val arguments: List<TypeProjectionRef>","com.rnett.plugin.naming.TypeRef.arguments"]},{"name":"val arrayToList: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.arrayToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/array-to-list.html","searchKeys":["arrayToList","val arrayToList: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.arrayToList"]},{"name":"val arrayToMutableList: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.arrayToMutableList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/array-to-mutable-list.html","searchKeys":["arrayToMutableList","val arrayToMutableList: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.arrayToMutableList"]},{"name":"val classifier: ClassRef","description":"com.rnett.plugin.naming.TypeRef.classifier","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/classifier.html","searchKeys":["classifier","val classifier: ClassRef","com.rnett.plugin.naming.TypeRef.classifier"]},{"name":"val clear: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.clear","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-list/clear.html","searchKeys":["clear","val clear: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.clear"]},{"name":"val clear: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.clear","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-map/clear.html","searchKeys":["clear","val clear: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.clear"]},{"name":"val clear: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.clear","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-set/clear.html","searchKeys":["clear","val clear: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.clear"]},{"name":"val collectionToTypedArray: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.collectionToTypedArray","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/collection-to-typed-array.html","searchKeys":["collectionToTypedArray","val collectionToTypedArray: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.collectionToTypedArray"]},{"name":"val collections: CollectionsBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.collections","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/collections.html","searchKeys":["collections","val collections: CollectionsBuilders","com.rnett.plugin.stdlib.StdlibBuilders.collections"]},{"name":"val contains: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.List.contains","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-list/contains.html","searchKeys":["contains","val contains: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.List.contains"]},{"name":"val contains: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Set.contains","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-set/contains.html","searchKeys":["contains","val contains: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.Set.contains"]},{"name":"val containsAll: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Set.containsAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-set/contains-all.html","searchKeys":["containsAll","val containsAll: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.Set.containsAll"]},{"name":"val containsKey: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Map.containsKey","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-map/contains-key.html","searchKeys":["containsKey","val containsKey: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.Map.containsKey"]},{"name":"val containsValue: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Map.containsValue","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-map/contains-value.html","searchKeys":["containsValue","val containsValue: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.Map.containsValue"]},{"name":"val entries: PropertyRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Map.entries","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-map/entries.html","searchKeys":["entries","val entries: PropertyRef","com.rnett.plugin.stdlib.Kotlin.Collections.Map.entries"]},{"name":"val error: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.error","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/error.html","searchKeys":["error","val error: FunctionRef","com.rnett.plugin.stdlib.Kotlin.error"]},{"name":"val fqName: FqName","description":"com.rnett.plugin.naming.BaseReference.fqName","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-base-reference/fq-name.html","searchKeys":["fqName","val fqName: FqName","com.rnett.plugin.naming.BaseReference.fqName"]},{"name":"val get: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.List.get","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-list/get.html","searchKeys":["get","val get: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.List.get"]},{"name":"val get: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Map.get","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-map/get.html","searchKeys":["get","val get: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.Map.get"]},{"name":"val hashCodeRef: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Any.hashCodeRef","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-any/hash-code-ref.html","searchKeys":["hashCodeRef","val hashCodeRef: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Any.hashCodeRef"]},{"name":"val indexOf: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.List.indexOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-list/index-of.html","searchKeys":["indexOf","val indexOf: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.List.indexOf"]},{"name":"val isEmpty: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.List.isEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-list/is-empty.html","searchKeys":["isEmpty","val isEmpty: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.List.isEmpty"]},{"name":"val isEmpty: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Map.isEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-map/is-empty.html","searchKeys":["isEmpty","val isEmpty: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.Map.isEmpty"]},{"name":"val isEmpty: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Set.isEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-set/is-empty.html","searchKeys":["isEmpty","val isEmpty: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.Set.isEmpty"]},{"name":"val isInstance: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Reflect.KClass.isInstance","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-reflect/-k-class/is-instance.html","searchKeys":["isInstance","val isInstance: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Reflect.KClass.isInstance"]},{"name":"val isStar: Boolean","description":"com.rnett.plugin.naming.TypeProjectionRef.isStar","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-projection-ref/is-star.html","searchKeys":["isStar","val isStar: Boolean","com.rnett.plugin.naming.TypeProjectionRef.isStar"]},{"name":"val iterableMinusElementToList: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.iterableMinusElementToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/iterable-minus-element-to-list.html","searchKeys":["iterableMinusElementToList","val iterableMinusElementToList: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.iterableMinusElementToList"]},{"name":"val iterableMinusIterableToList: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.iterableMinusIterableToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/iterable-minus-iterable-to-list.html","searchKeys":["iterableMinusIterableToList","val iterableMinusIterableToList: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.iterableMinusIterableToList"]},{"name":"val iterablePlusElementToList: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.iterablePlusElementToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/iterable-plus-element-to-list.html","searchKeys":["iterablePlusElementToList","val iterablePlusElementToList: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.iterablePlusElementToList"]},{"name":"val iterablePlusIterableToList: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.iterablePlusIterableToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/iterable-plus-iterable-to-list.html","searchKeys":["iterablePlusIterableToList","val iterablePlusIterableToList: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.iterablePlusIterableToList"]},{"name":"val iterableToList: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.iterableToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/iterable-to-list.html","searchKeys":["iterableToList","val iterableToList: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.iterableToList"]},{"name":"val iterableToMap: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.iterableToMap","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/iterable-to-map.html","searchKeys":["iterableToMap","val iterableToMap: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.iterableToMap"]},{"name":"val iterableToMutableList: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.iterableToMutableList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/iterable-to-mutable-list.html","searchKeys":["iterableToMutableList","val iterableToMutableList: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.iterableToMutableList"]},{"name":"val iterator: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.List.iterator","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-list/iterator.html","searchKeys":["iterator","val iterator: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.List.iterator"]},{"name":"val iterator: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Set.iterator","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-set/iterator.html","searchKeys":["iterator","val iterator: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.Set.iterator"]},{"name":"val keys: PropertyRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Map.keys","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-map/keys.html","searchKeys":["keys","val keys: PropertyRef","com.rnett.plugin.stdlib.Kotlin.Collections.Map.keys"]},{"name":"val let: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.let","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/let.html","searchKeys":["let","val let: FunctionRef","com.rnett.plugin.stdlib.Kotlin.let"]},{"name":"val listOfEmpty: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.listOfEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/list-of-empty.html","searchKeys":["listOfEmpty","val listOfEmpty: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.listOfEmpty"]},{"name":"val listOfNotNullVararg: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.listOfNotNullVararg","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/list-of-not-null-vararg.html","searchKeys":["listOfNotNullVararg","val listOfNotNullVararg: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.listOfNotNullVararg"]},{"name":"val listOfVararg: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.listOfVararg","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/list-of-vararg.html","searchKeys":["listOfVararg","val listOfVararg: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.listOfVararg"]},{"name":"val mapGetOrDefault: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapGetOrDefault","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-get-or-default.html","searchKeys":["mapGetOrDefault","val mapGetOrDefault: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapGetOrDefault"]},{"name":"val mapGetOrElse: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapGetOrElse","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-get-or-else.html","searchKeys":["mapGetOrElse","val mapGetOrElse: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapGetOrElse"]},{"name":"val mapGetValue: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapGetValue","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-get-value.html","searchKeys":["mapGetValue","val mapGetValue: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapGetValue"]},{"name":"val mapMinusIterableKeys: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapMinusIterableKeys","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-minus-iterable-keys.html","searchKeys":["mapMinusIterableKeys","val mapMinusIterableKeys: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapMinusIterableKeys"]},{"name":"val mapMinusKey: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapMinusKey","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-minus-key.html","searchKeys":["mapMinusKey","val mapMinusKey: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapMinusKey"]},{"name":"val mapOfEmpty: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapOfEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-of-empty.html","searchKeys":["mapOfEmpty","val mapOfEmpty: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapOfEmpty"]},{"name":"val mapOfVararg: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapOfVararg","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-of-vararg.html","searchKeys":["mapOfVararg","val mapOfVararg: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapOfVararg"]},{"name":"val mapPlusElementPair: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapPlusElementPair","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-plus-element-pair.html","searchKeys":["mapPlusElementPair","val mapPlusElementPair: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapPlusElementPair"]},{"name":"val mapPlusIterablePairs: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapPlusIterablePairs","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-plus-iterable-pairs.html","searchKeys":["mapPlusIterablePairs","val mapPlusIterablePairs: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapPlusIterablePairs"]},{"name":"val mapPlusMap: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapPlusMap","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-plus-map.html","searchKeys":["mapPlusMap","val mapPlusMap: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapPlusMap"]},{"name":"val mapToList: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mapToList","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/map-to-list.html","searchKeys":["mapToList","val mapToList: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mapToList"]},{"name":"val messageCollector: MessageCollector","description":"com.rnett.plugin.ir.IrTransformer.messageCollector","location":"-compiler -plugin -utils/com.rnett.plugin.ir/-ir-transformer/message-collector.html","searchKeys":["messageCollector","val messageCollector: MessageCollector","com.rnett.plugin.ir.IrTransformer.messageCollector"]},{"name":"val mutableListOfEmpty: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mutableListOfEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/mutable-list-of-empty.html","searchKeys":["mutableListOfEmpty","val mutableListOfEmpty: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mutableListOfEmpty"]},{"name":"val mutableListOfVararg: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mutableListOfVararg","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/mutable-list-of-vararg.html","searchKeys":["mutableListOfVararg","val mutableListOfVararg: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mutableListOfVararg"]},{"name":"val mutableListRemoveFirst: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mutableListRemoveFirst","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/mutable-list-remove-first.html","searchKeys":["mutableListRemoveFirst","val mutableListRemoveFirst: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mutableListRemoveFirst"]},{"name":"val mutableListRemoveLast: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mutableListRemoveLast","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/mutable-list-remove-last.html","searchKeys":["mutableListRemoveLast","val mutableListRemoveLast: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mutableListRemoveLast"]},{"name":"val mutableMapGetOrPut: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mutableMapGetOrPut","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/mutable-map-get-or-put.html","searchKeys":["mutableMapGetOrPut","val mutableMapGetOrPut: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mutableMapGetOrPut"]},{"name":"val mutableMapOfEmpty: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mutableMapOfEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/mutable-map-of-empty.html","searchKeys":["mutableMapOfEmpty","val mutableMapOfEmpty: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mutableMapOfEmpty"]},{"name":"val mutableMapOfVararg: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mutableMapOfVararg","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/mutable-map-of-vararg.html","searchKeys":["mutableMapOfVararg","val mutableMapOfVararg: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mutableMapOfVararg"]},{"name":"val mutableSetOfEmpty: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mutableSetOfEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/mutable-set-of-empty.html","searchKeys":["mutableSetOfEmpty","val mutableSetOfEmpty: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mutableSetOfEmpty"]},{"name":"val mutableSetOfVararg: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.mutableSetOfVararg","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/mutable-set-of-vararg.html","searchKeys":["mutableSetOfVararg","val mutableSetOfVararg: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.mutableSetOfVararg"]},{"name":"val nullable: Boolean","description":"com.rnett.plugin.naming.TypeRef.nullable","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/nullable.html","searchKeys":["nullable","val nullable: Boolean","com.rnett.plugin.naming.TypeRef.nullable"]},{"name":"val nullableHashCode: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.nullableHashCode","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/nullable-hash-code.html","searchKeys":["nullableHashCode","val nullableHashCode: FunctionRef","com.rnett.plugin.stdlib.Kotlin.nullableHashCode"]},{"name":"val nullableToString: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.nullableToString","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/nullable-to-string.html","searchKeys":["nullableToString","val nullableToString: FunctionRef","com.rnett.plugin.stdlib.Kotlin.nullableToString"]},{"name":"val put: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.put","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-map/put.html","searchKeys":["put","val put: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.put"]},{"name":"val putAll: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.putAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-map/put-all.html","searchKeys":["putAll","val putAll: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.putAll"]},{"name":"val putAllIterable: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.putAllIterable","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-map/put-all-iterable.html","searchKeys":["putAllIterable","val putAllIterable: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.putAllIterable"]},{"name":"val reflect: StdlibBuilders.ReflectBuilders","description":"com.rnett.plugin.stdlib.StdlibBuilders.reflect","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-stdlib-builders/reflect.html","searchKeys":["reflect","val reflect: StdlibBuilders.ReflectBuilders","com.rnett.plugin.stdlib.StdlibBuilders.reflect"]},{"name":"val remove: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.remove","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-list/remove.html","searchKeys":["remove","val remove: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.remove"]},{"name":"val remove: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.remove","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-map/remove.html","searchKeys":["remove","val remove: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableMap.remove"]},{"name":"val remove: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.remove","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-set/remove.html","searchKeys":["remove","val remove: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.remove"]},{"name":"val removeAll: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.removeAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-list/remove-all.html","searchKeys":["removeAll","val removeAll: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.removeAll"]},{"name":"val removeAll: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.removeAll","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-set/remove-all.html","searchKeys":["removeAll","val removeAll: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableSet.removeAll"]},{"name":"val run: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.run","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/run.html","searchKeys":["run","val run: FunctionRef","com.rnett.plugin.stdlib.Kotlin.run"]},{"name":"val set: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.set","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-mutable-list/set.html","searchKeys":["set","val set: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.MutableList.set"]},{"name":"val setMinusElementToSet: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.setMinusElementToSet","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/set-minus-element-to-set.html","searchKeys":["setMinusElementToSet","val setMinusElementToSet: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.setMinusElementToSet"]},{"name":"val setMinusIterableToSet: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.setMinusIterableToSet","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/set-minus-iterable-to-set.html","searchKeys":["setMinusIterableToSet","val setMinusIterableToSet: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.setMinusIterableToSet"]},{"name":"val setOfEmpty: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.setOfEmpty","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/set-of-empty.html","searchKeys":["setOfEmpty","val setOfEmpty: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.setOfEmpty"]},{"name":"val setOfNotNullVararg: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.setOfNotNullVararg","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/set-of-not-null-vararg.html","searchKeys":["setOfNotNullVararg","val setOfNotNullVararg: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.setOfNotNullVararg"]},{"name":"val setOfVararg: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.setOfVararg","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/set-of-vararg.html","searchKeys":["setOfVararg","val setOfVararg: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.setOfVararg"]},{"name":"val setPlusElementToSet: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.setPlusElementToSet","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/set-plus-element-to-set.html","searchKeys":["setPlusElementToSet","val setPlusElementToSet: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.setPlusElementToSet"]},{"name":"val setPlusIterableToSet: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.setPlusIterableToSet","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/set-plus-iterable-to-set.html","searchKeys":["setPlusIterableToSet","val setPlusIterableToSet: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Collections.setPlusIterableToSet"]},{"name":"val size: PropertyRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.List.size","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-list/size.html","searchKeys":["size","val size: PropertyRef","com.rnett.plugin.stdlib.Kotlin.Collections.List.size"]},{"name":"val size: PropertyRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Map.size","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-map/size.html","searchKeys":["size","val size: PropertyRef","com.rnett.plugin.stdlib.Kotlin.Collections.Map.size"]},{"name":"val size: PropertyRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Set.size","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-set/size.html","searchKeys":["size","val size: PropertyRef","com.rnett.plugin.stdlib.Kotlin.Collections.Set.size"]},{"name":"val throwablePrintStackTrace: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.throwablePrintStackTrace","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/throwable-print-stack-trace.html","searchKeys":["throwablePrintStackTrace","val throwablePrintStackTrace: FunctionRef","com.rnett.plugin.stdlib.Kotlin.throwablePrintStackTrace"]},{"name":"val to: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.to","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/to.html","searchKeys":["to","val to: FunctionRef","com.rnett.plugin.stdlib.Kotlin.to"]},{"name":"val toByte: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Number.toByte","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-number/to-byte.html","searchKeys":["toByte","val toByte: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Number.toByte"]},{"name":"val toChar: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Number.toChar","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-number/to-char.html","searchKeys":["toChar","val toChar: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Number.toChar"]},{"name":"val toDouble: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Number.toDouble","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-number/to-double.html","searchKeys":["toDouble","val toDouble: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Number.toDouble"]},{"name":"val toFloat: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Number.toFloat","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-number/to-float.html","searchKeys":["toFloat","val toFloat: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Number.toFloat"]},{"name":"val toInt: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Number.toInt","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-number/to-int.html","searchKeys":["toInt","val toInt: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Number.toInt"]},{"name":"val toLong: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Number.toLong","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-number/to-long.html","searchKeys":["toLong","val toLong: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Number.toLong"]},{"name":"val toShort: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Number.toShort","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-number/to-short.html","searchKeys":["toShort","val toShort: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Number.toShort"]},{"name":"val toStringRef: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Any.toStringRef","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-any/to-string-ref.html","searchKeys":["toStringRef","val toStringRef: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Any.toStringRef"]},{"name":"val typeOf: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.Reflect.typeOf","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-reflect/type-of.html","searchKeys":["typeOf","val typeOf: FunctionRef","com.rnett.plugin.stdlib.Kotlin.Reflect.typeOf"]},{"name":"val values: PropertyRef","description":"com.rnett.plugin.stdlib.Kotlin.Collections.Map.values","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/-collections/-map/values.html","searchKeys":["values","val values: PropertyRef","com.rnett.plugin.stdlib.Kotlin.Collections.Map.values"]},{"name":"val variance: TypeRefVariance","description":"com.rnett.plugin.naming.TypeRef.variance","location":"-compiler -plugin -utils/com.rnett.plugin.naming/-type-ref/variance.html","searchKeys":["variance","val variance: TypeRefVariance","com.rnett.plugin.naming.TypeRef.variance"]},{"name":"val with: FunctionRef","description":"com.rnett.plugin.stdlib.Kotlin.with","location":"-compiler -plugin -utils/com.rnett.plugin.stdlib/-kotlin/with.html","searchKeys":["with","val with: FunctionRef","com.rnett.plugin.stdlib.Kotlin.with"]}]
